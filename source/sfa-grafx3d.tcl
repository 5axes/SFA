# start x3dom file for non-FEM graphics
proc x3dFileStart {} {
  global cadSystem entCount localName opt stepAP timeStamp viz writeDir writeDirType
  global x3dFile x3dFileName x3dHeight x3dMax x3dMin x3dMsgColor x3dStartFile x3dTitle x3dViewOK x3dWidth

  set x3dViewOK 1
  if {$x3dStartFile == 0} {return}
  if {![info exists stepAP]} {set stepAP [getStepAP $localName]}
  if {[string first "IFC" $stepAP] == 0 || [string first "ISO" $stepAP] == 0 || [string first "STRUCTURAL_FRAME_SCHEMA" $stepAP] == 0} {
    errorMsg "The Viewer only works with AP203, AP214, AP242, AP209, and other similar STEP APs.\n The $stepAP schema is not supported for Views."
    set x3dViewOK 0
    return
  }

  set x3dStartFile 0
  checkTempDir

# x3d output file name
  set x3dir [file rootname $localName]
  if {$opt(writeDirType) == 2} {set x3dir [file join $writeDir [file rootname [file tail $localName]]]}
  set x3dFileName $x3dir\-sfa.html
  set x3dFile [open $x3dFileName w]

# delete old output files
  catch {file delete -force -- $x3dFileName}
  catch {file delete -force -- "$x3dir\_x3dom.html"}
  catch {file delete -force -- "$x3dir\-x3dom.html"}

# start x3d file
  set title [file tail $localName]
  if {$stepAP != "" && [string range $stepAP 0 1] == "AP"} {append title " | $stepAP"}
  puts $x3dFile "<!DOCTYPE html>\n<html>\n<head>\n<title>$title</title>\n<base target=\"_blank\">\n<meta http-equiv='Content-Type' content='text/html;charset=utf-8'/>"
  puts $x3dFile "<link rel='stylesheet' type='text/css' href='https://www.x3dom.org/x3dom/release/x3dom.css'/>\n<script type='text/javascript' src='https://www.x3dom.org/x3dom/release/x3dom.js'></script>"

# scripts and functions for selecting parts
  puts $x3dFile "\n<script type='text/javascript' src='https://code.jquery.com/jquery-2.1.0.min.js'></script>"
  puts $x3dFile "<script>
//Handle click on any group member
function handleGroupClick(event) {
  //Mark selection point
  \$('#marker').attr('translation', event.hitPnt);
}
//Handle click on a shape
function handleSingleClick(shape) {
  \$('#lastClickedObject').html(\$(shape).attr(\"id\"));
}

\$(document).ready(function(){
  //Add an onclick callback to every shape
  \$(\"shape\").each(function() {
    \$(this).attr(\"onclick\", \"handleSingleClick(this)\");
  });
});
</script>"
  puts $x3dFile "</head>"

# x3d title
  set x3dTitle [file tail $localName]
  if {$stepAP != "" && [string range $stepAP 0 1] == "AP"} {append x3dTitle "&nbsp;&nbsp;&nbsp;$stepAP"}
  if {[info exists timeStamp]} {
    if {$timeStamp != ""} {
      set ts [fixTimeStamp $timeStamp]
      append x3dTitle "&nbsp;&nbsp;&nbsp;$ts"
    }
  }
  if {[info exists cadSystem]} {
    if {$cadSystem != ""} {
      regsub -all "_" $cadSystem " " cs
      append x3dTitle "&nbsp;&nbsp;&nbsp;$cs"
    }
  }
  puts $x3dFile "\n<body><font face=\"sans-serif\">\n<h3>$x3dTitle</h3>"
  puts $x3dFile "\n<table>"

# messages above the x3d
  set msg ""
  if {$viz(PMI)} {
    append msg "$viz(PMIMSG)  "
  } elseif {$opt(viewPMI)} {
    if {[string first "Some Graphical PMI" $viz(PMIMSG)] == 0} {append msg "The STEP file contains only Semantic PMI and no Graphical PMI.  "}
  }
  if {$viz(TPG) && [info exist entCount(next_assembly_usage_occurrence)]} {append msg "Tessellated parts in an assembly might have the wrong position and orientation or be missing.  "}

# part selection feedback
  set ok 0
  if {[info exists viz(PRT)]} {if {$viz(PRT)} {set ok 1}}
  if {!$ok && $opt(viewPart)} {set ok 1}
  if {$ok} {
    if {$msg != ""} {append msg "&nbsp;&nbsp;"}
    append msg "<b>Part:</b> <span id='lastClickedObject'></span>"
  }
  if {$msg != ""} {puts $x3dFile "<tr><td valign='top' width='85%'>[string trim $msg]</td><td></td></tr>"}

# x3d window size
  puts $x3dFile "<tr><td valign='top' width='85%'>"
  set x3dHeight 900
  set x3dWidth [expr {int($x3dHeight*1.78)}]
  catch {
    set x3dHeight [expr {int([winfo screenheight .]*0.85)}]
    set x3Width [expr {int($x3dHeight*[winfo screenwidth .]/[winfo screenheight .])}]
  }
  puts $x3dFile "\n<X3D id='x3d' showStat='false' showLog='false' x='0px' y='0px' width='$x3dWidth' height='$x3dHeight' style='border:1px solid black'>\n<Scene DEF='scene'>"
  puts $x3dFile "<!-- X3D generated by the NIST STEP File Analyzer and Viewer [getVersion] -->"

# read tessellated geometry separately because of IFCsvr limitations
  if {($viz(PMI) && [info exists entCount(tessellated_annotation_occurrence)]) || $viz(TPG)} {tessReadGeometry}
  outputMsg " Writing View to: [truncFileName [file nativename $x3dFileName]]" $x3dMsgColor

# coordinate min, max, center
  if {$x3dMax(x) != -1.e8} {
    foreach xyz {x y z} {
      set delt($xyz) [expr {$x3dMax($xyz)-$x3dMin($xyz)}]
      set xyzcen($xyz) [format "%.4f" [expr {0.5*$delt($xyz) + $x3dMin($xyz)}]]
    }
    set maxxyz [expr {max($delt(x),$delt(y),$delt(z))}]
  }
  update idletasks
}

# -------------------------------------------------------------------------------
# finish x3d file, write tessellated edges, PMI saved view geometry, set viewpoints, add navigation and background color, and close X3DOM file
proc x3dFileEnd {} {
  global ao brepFile brepFileName datumTargetView entCount nistModelURLs nistName nsketch
  global numTessColor opt savedViewButtons savedViewFile savedViewFileName savedViewItems savedViewNames savedViewNone sphereDef stepAP
  global tessCoord tessEdges tessPartFile tessPartFileName viz x3dApps x3dAxes x3dBbox x3dCoord x3dFile x3dHeight
  global x3dIndex x3dMax x3dMin x3dMsg x3dParts x3dShape x3dStartFile x3dTitle x3dViewOK x3dWidth

  if {!$x3dViewOK} {
    foreach var [list x3dCoord x3dFile x3dIndex x3dMax x3dMin x3dShape x3dStartFile] {catch {unset $var}}
    return
  }

# PMI is already written to file, generate b-rep part geometry
  set viz(PRT) 0
  if {$opt(viewPart)} {
    if {!$opt(partOnly)} {
      set ok 0
      foreach item [list advanced_brep_shape_representation geometrically_bounded_surface_shape_representation geometrically_bounded_wireframe_shape_representation \
                         manifold_solid_brep manifold_surface_shape_representation shell_based_surface_model] {
        if {[info exists entCount($item)]} {set ok 1}
      }
    } else {
      set ok 1
    }
    if {$ok} {x3dBrepGeom}
  }

# coordinate min, max, center
  foreach idx {x y z} {
    if {$x3dMax($idx) == -1.e8 || $x3dMax($idx) > 1.e8} {set x3dMax($idx) 500.}
    if {$x3dMin($idx) == 1.e8 || $x3dMin($idx) < -1.e8} {set x3dMin($idx) -500.}
    set delt($idx) [expr {$x3dMax($idx)-$x3dMin($idx)}]
    set xyzcen($idx) [trimNum [format "%.4f" [expr {0.5*$delt($idx) + $x3dMin($idx)}]]]
  }
  set maxxyz [expr {max($delt(x),$delt(y),$delt(z))}]

# -------------------------------------------------------------------------------
# PMI not in a saved view
  if {[info exists savedViewNone]} {puts $x3dFile "</Group></Switch>"}

# -------------------------------------------------------------------------------
# write tessellated edges
  set viz(TED) 0
  if {[info exists tessEdges]} {
    puts $x3dFile "\n<!-- TESSELLATED EDGES -->\n<Switch whichChoice='0' id='swTED'><Group>"
    foreach cid [array names tessEdges] {
      puts $x3dFile "<Shape><Appearance><Material emissiveColor='0 0 0'></Material></Appearance>"
      puts $x3dFile " <IndexedLineSet coordIndex='[join $tessEdges($cid)]'>"
      puts $x3dFile "  <Coordinate DEF='coord$cid' point='$tessCoord($cid)'></Coordinate></IndexedLineSet></Shape>"
    }
    puts $x3dFile "</Group></Switch>"
    set viz(TED) 1
    unset tessEdges
  }

# -------------------------------------------------------------------------------
# holes
  set ok 0
  set viz(HOL) 0
  set sphereDef {}
  foreach ent [list counterbore_hole_occurrence counterdrill_hole_occurrence countersink_hole_occurrence spotface_hole_occurrence] {
    if {[info exists entCount($ent)]} {set ok 1}
  }
  if {$ok} {x3dHoles $maxxyz}

# -------------------------------------------------------------------------------
# supplemental geometry
  set viz(SMG) 0
  if {[info exists entCount(constructive_geometry_representation)]} {x3dSuppGeom $maxxyz}

# -------------------------------------------------------------------------------
# datum targets
  set viz(DTR) 0
  if {[info exists datumTargetView]} {
    x3dDatumTarget $maxxyz
  } elseif {[info exists entCount(placed_datum_target_feature)] || [info exists entCount(datum_target)]} {
    set msg " Datum targets cannot be shown without "
    if {$opt(xlFormat) != "Excel"} {
      append msg "generating a spreadsheet"
    } elseif {!$opt(PMISEM) || $opt(PMISEMDIM)} {
      append msg "selecting Analyze Semantic PMI"
    }
    append msg ".  See Help > View > Datum Targets"
    outputMsg $msg red
  }

# -------------------------------------------------------------------------------
# write any PMI saved view geometry for multiple saved views
  set savedViewButtons {}
  if {[info exists savedViewNames]} {
    if {[llength $savedViewNames] > 0} {
      for {set i 0} {$i < [llength $savedViewNames]} {incr i} {
        set svn [lindex $savedViewNames $i]
        set svnfn "View$i"
        catch {close $savedViewFile($svnfn)}
        if {[info exists savedViewFileName($svnfn)]} {
          if {[file size $savedViewFileName($svnfn)] > 0} {
            set svMap($svn) $svn
            set svWrite 1

# check if same saved view graphics already written
            if {[info exists savedViewItems($svn)]} {
              for {set j 0} {$j < $i} {incr j} {
                set svn1 [lindex $savedViewNames $j]
                if {[info exists savedViewItems($svn1)]} {
                  if {$savedViewItems($svn) == $savedViewItems($svn1)} {
                    set svMap($svn) $svn1
                    set svWrite 0
                    break
                  }
                }
              }
            }

            set svn2 $svn
            if {$svn2 == ""} {
              set svn2 "Missing name"
              set svMap($svn2) $svn2
            }
            lappend savedViewButtons $svn2

            puts $x3dFile "\n<!-- SAVED VIEW$i $svn2 -->"
            puts $x3dFile "<Switch whichChoice='0' id='sw$svnfn'><Group>"
            if {$svWrite} {

# get saved view graphics from file
              set lastTransform ""
              set f [open $savedViewFileName($svnfn) r]
              while {[gets $f line] >= 0} {

# check for similar transforms
                if {[string first "<Transform" $line] == -1 && [string first "</Transform>" $line] == -1} {
                  puts $x3dFile $line
                } elseif {[string first "<Transform" $line] == 0} {
                  if {$line != $lastTransform} {
                    if {$lastTransform != ""} {puts $x3dFile "</Transform>"}
                    puts $x3dFile $line
                    set lastTransform $line
                  }
                }
              }
              if {$lastTransform != ""} {puts $x3dFile "</Transform>"}

              close $f
              catch {unset savedViewFile($svnfn)}
            } else {
              puts $x3dFile "<!-- SAME AS $svMap($svn) -->"
              errorMsg " Two or more Saved Views have the exact same PMI" red
            }
            puts $x3dFile "</Group></Switch>"
          } else {
            catch {close $savedViewFile($svnfn)}
          }
        }
        catch {file delete -force -- $savedViewFileName($svnfn)}
      }
    }
  }

# -------------------------------------------------------------------------------
# coordinate axes, if not already written
  if {$x3dAxes} {
    set asize [trimNum [expr {$maxxyz*0.05}]]
    x3dCoordAxes $asize
  }

# -------------------------------------------------------------------------------
# write tessellated part
  if {[info exists tessPartFile]} {
    puts $x3dFile "\n<!-- TESSELLATED PART GEOMETRY -->\n<Switch whichChoice='0' id='swTPG'><Group>"
    catch {close $tessPartFile}

    set lastTransform ""
    set f [open $tessPartFileName r]

# first check for similar transforms, write to tmp file
    while {[gets $f line] >= 0} {
      if {[string first "<Transform" $line] == -1 && [string first "</Transform>" $line] == -1} {
        puts $x3dFile $line
      } elseif {[string first "<Transform" $line] == 0} {
        if {$line != $lastTransform} {
          if {$lastTransform != ""} {puts $x3dFile "</Transform>"}
          puts $x3dFile $line
          set lastTransform $line
        }
      }
    }
    close $f

    if {$lastTransform != ""} {puts $x3dFile "</Transform>"}
    puts $x3dFile "</Group></Switch>"
    catch {file delete -force -- $tessPartFileName}
    unset tessPartFile
    unset tessPartFileName
  }

# -------------------------------------------------------------------------------
# add b-rep part geometry from temp file
  if {$viz(PRT)} {
    if {[info exists brepFileName]} {
      if {[file exists $brepFileName]} {
        close $brepFile
        if {[file size $brepFileName] > 0} {
          set brepFile [open $brepFileName r]
          while {[gets $brepFile line] >= 0} {puts $x3dFile $line}
          close $brepFile
          if {!$opt(DEBUGX3D)} {catch {file delete -force -- $brepFileName}}
        }
      }
    }
  }

# -------------------------------------------------------------------------------
# default viewpoint
  puts $x3dFile "\n<!-- VIEWPOINTS -->"
  set cor "centerOfRotation='$xyzcen(x) $xyzcen(y) $xyzcen(z)'"
  set xmin [trimNum [expr {$x3dMin(x) - 1.4*max($delt(y),$delt(z))}]]
  set xmax [trimNum [expr {$x3dMax(x) + 1.4*max($delt(y),$delt(z))}]]
  set ymin [trimNum [expr {$x3dMin(y) - 1.4*max($delt(x),$delt(z))}]]
  set ymax [trimNum [expr {$x3dMax(y) + 1.4*max($delt(x),$delt(z))}]]
  set zmin [trimNum [expr {$x3dMin(z) - 1.4*max($delt(x),$delt(y))}]]
  set zmax [trimNum [expr {$x3dMax(z) + 1.4*max($delt(x),$delt(y))}]]

# z axis up
  puts $x3dFile "<Viewpoint id='Z up 1' position='$xyzcen(x) $ymin $xyzcen(z)' $cor orientation='1 0 0 1.5708'></Viewpoint>"
  puts $x3dFile "<Viewpoint id='Z up 2' position='$xmax $xyzcen(y) $xyzcen(z)' $cor orientation='1 1 1 2.094'></Viewpoint>"
  puts $x3dFile "<Viewpoint id='Z up 3' position='$xyzcen(x) $xyzcen(y) $zmax' $cor></Viewpoint>"
  puts $x3dFile "<Viewpoint id='Z up 5' position='$xyzcen(x) $xyzcen(y) $zmin' $cor orientation='0 1 0 3.1416'></Viewpoint>"

# y axis up
  puts $x3dFile "<Viewpoint id='Y up 1' position='$xmax $xyzcen(y) $xyzcen(z)' $cor orientation='0 1 0 1.5708'></Viewpoint>"
  puts $x3dFile "<Viewpoint id='Y up 2' position='$xyzcen(x) $ymax $xyzcen(z)' $cor orientation='1 0 0 -1.5708'></Viewpoint>"
  puts $x3dFile "<Viewpoint id='Y up 3' position='$xmin $xyzcen(y) $xyzcen(z)' $cor orientation='0 -1 0 1.5708'></Viewpoint>"

# iso
  puts $x3dFile "<Viewpoint id='Iso 1'  position='[trimNum [expr {$xmax*0.733}]] [trimNum [expr {$ymax*0.7}]] [trimNum [expr {$zmax*1.0}]]' $cor orientation='-0.6335 0.7486 0.1956 0.7825'></Viewpoint>"

# orthographic
  set fov [trimNum [expr {0.55*max($delt(x),$delt(z))}]]
  puts $x3dFile "<OrthoViewpoint id='Ortho 1' position='$xyzcen(x) [trimNum [expr {$x3dMin(y) - 1.4*max($delt(x),$delt(z))}]] $xyzcen(z)' $cor orientation='1 0 0 1.5708' fieldOfView='\[-$fov,-$fov,$fov,$fov\]'></OrthoViewpoint>"

# background color, navigation
  set skyBlue ".53 .81 .92"
  set bgcheck1 ""
  set bgcheck2 ""
  set bgcheck3 "checked"
  set bgcolor ".8 .8 .8"
  if {[string first "AP209" $stepAP] != -1} {
    set bgcheck1 "checked"
    set bgcheck3 ""
    set bgcolor "1 1 1"
  } elseif {!$viz(PMI) && !$viz(SMG) && !$viz(DTR) && !$viz(HOL)} {
    set bgcheck2 "checked"
    set bgcheck3 ""
    set bgcolor $skyBlue
  }

  puts $x3dFile "\n<!-- BACKGROUND -->"
  puts $x3dFile "<Background id='BG' skyColor='$bgcolor'></Background>"
  puts $x3dFile "<NavigationInfo type='\"EXAMINE\" \"ANY\"'></NavigationInfo>"
  regsub -all "&nbsp;" $x3dTitle " " title
  puts $x3dFile "<WorldInfo title='$title' info='\"Generated by the NIST STEP File Analyzer and Viewer [getVersion]\"'></WorldInfo>"
  puts $x3dFile "</Scene></X3D>"

# credits
  set str "\n<p>Generated by the <a href=\"https://www.nist.gov/services-resources/software/step-file-analyzer-and-viewer\">NIST STEP File Analyzer and Viewer [getVersion]</a>"
  append str "&nbsp;&nbsp;[clock format [clock seconds] -format "%d %b %G %H:%M"]"
  append str "&nbsp;&nbsp;<a href=\"https://www.nist.gov/disclaimer\">NIST Disclaimer</a>"
  puts $x3dFile $str

# start right column
  puts $x3dFile "</td>\n\n<!-- RIGHT COLUMN BUTTONS -->\n<td valign='top'>"

# -------------------------------------------------------------------------------
# for NIST model - link to drawing
  if {[info exists nistName]} {
    if {$nistName != ""} {
      foreach item $nistModelURLs {
        if {[string first $nistName $item] == 0} {puts $x3dFile "<a href=\"https://s3.amazonaws.com/nist-el/mfg_digitalthread/$item\">NIST Test Case Drawing</a><p>"}
      }
    }
  }

# part geometry, sketch geometry, edges checkboxes
  if {$viz(PRT)} {
    puts $x3dFile "\n<!-- Part geometry checkbox -->\n<input type='checkbox' checked onclick='togPRT(this.value)'/>Part Geometry"
    if {[info exists nsketch]} {
      if {$nsketch > -1} {puts $x3dFile "<!-- Sketch geometry checkbox -->\n<br><input type='checkbox' checked onclick='togSKH(this.value)'/>Sketch Geometry"}
    }
    if {$opt(partEdges) && $viz(EDG)} {puts $x3dFile "<!-- Edges checkbox -->\n<br><input type='checkbox' checked onclick='togEDG(this.value)' id='swEDG'/>Edges"}

# part checkboxes
    if {[info exists x3dParts]} {
      if {[llength [array names x3dParts]] > 1} {
        puts $x3dFile "\n<!-- Assembly/Part checkboxes -->\n<p>Assembly/Part\n<br><font size='-1'>"
        set nparts [llength [array names x3dParts]]
        set lenname 0
        foreach name [array names x3dParts] {if {[string length $name] > $lenname} {set lenname [string length $name]}}
        set div ""
        if {$nparts > 40 || $lenname > 40} {
          append div "<style>div.parts \{overflow: scroll;"
          if {$lenname > 40} {append div " width: [expr {int($x3dWidth*.2)}]px;"}
          if {$nparts > 40} {append div " height: [expr {int($x3dHeight*.75)}]px;"}
          append div "\}</style>"
        }
        if {$div != ""} {puts $x3dFile "$div\n<div class='parts'>"}
        foreach name [lsort -nocase [array names x3dParts]] {
          puts $x3dFile "<nobr><input type='checkbox' checked onclick='togPart[lindex $x3dParts($name) 0]\(this.value)'/>$name </nobr><br>"
        }
        if {$div != ""} {puts $x3dFile "</div>"}
        puts $x3dFile "</font>"
      }
    }
    puts $x3dFile "<p>"
  }

# tessellated part geometry checkbox
  if {$viz(TPG)} {
    puts $x3dFile "\n<!-- Tessellated part geometry checkbox -->\n<input type='checkbox' checked onclick='togTPG(this.value)'/>Tessellated Part Geometry"
    if {$viz(TED)} {puts $x3dFile "<!-- Tessellated edges checkbox -->\n<br><input type='checkbox' checked onclick='togTED(this.value)'/>Lines (Tessellated Edges)"}
    puts $x3dFile "<p>"
  }

# supplemental geometry checkbox
  if {$viz(SMG)} {
    puts $x3dFile "\n<!-- Supplemental geometry checkbox -->\n<input type='checkbox' checked onclick='togSMG(this.value)'/>Supplemental Geometry"
    if {$viz(DTR)} {
      puts $x3dFile "<br>"
    } else {
      puts $x3dFile "<p>"
    }
  }

# datum targets checkbox
  if {$viz(DTR)} {
    puts $x3dFile "\n<!-- Datum targets checkbox -->\n<input type='checkbox' checked onclick='togDTR(this.value)'/>Datum Targets"
    if {$viz(HOL)} {
      puts $x3dFile "<br>"
    } else {
      puts $x3dFile "<p>"
    }
  }

# holes checkbox
  if {$viz(HOL)} {
    puts $x3dFile "\n<!-- Holes checkbox -->\n<input type='checkbox' checked onclick='togHole(this.value)'/>Holes<p>"
  }

# for PMI annotations - checkboxes for toggling saved view graphics
  if {$viz(PMI) && [llength $savedViewButtons] > 0} {
    puts $x3dFile "\n<!-- Saved view checkboxes -->\nSaved View Graphical PMI"
    set ok 1
    foreach svn $savedViewButtons {
      puts $x3dFile "<br><input type='checkbox' checked onclick='togView[lsearch $savedViewNames $svn]\(this.value)'/>$svn"
      if {[string first "MBD" [string toupper $svn]] == -1 && $nistName != ""} {set ok 0}
    }
  }

# PMI not in a saved view
  if {[info exists savedViewNone]} {
    if {$viz(PMI) && [llength $savedViewButtons] > 0} {
      set str "Not in a Saved View"
      set pbr "br"
    } else {
      set str "Graphical PMI"
      set pbr "p"
    }
    puts $x3dFile "\n<!-- PMI not in a saved view checkbox -->\n<$pbr><input type='checkbox' checked onclick='togPMI(this.value)'/>$str\n<p>"
  }

# bounding box
  if {$viz(PRT) && [info exists x3dBbox]} {
    if {$x3dBbox != ""} {puts $x3dFile "\n<p>$x3dBbox"}
    if {$viz(FEA)} {puts $x3dFile "<p>"}
  }

# FEM checkboxes
  if {$viz(FEA)} {feaButtons 1}

# extra text messages
  if {[info exists x3dMsg]} {
    if {[llength $x3dMsg] > 0} {
      puts $x3dFile "\n<!-- Messages -->"
      puts $x3dFile "<ul style=\"padding-left:20px\">"
      foreach item $x3dMsg {puts $x3dFile "<li>$item"}
      puts $x3dFile "</ul>"
      unset x3dMsg
    }
  }

# axes checkbox
  puts $x3dFile "\n<!-- Axes checkbox -->\n<p><hr><p><input type='checkbox' checked onclick='togAxes(this.value)'/>Origin<p>"

# background color radio buttons
  puts $x3dFile "\n<!-- Background radio button -->\nBackground Color<br>"
  puts $x3dFile "<input type='radio' name='bgcolor' value='1 1 1' $bgcheck1 onclick='BGcolor(this.value)'/>White<br>"
  puts $x3dFile "<input type='radio' name='bgcolor' value='$skyBlue' $bgcheck2 onclick='BGcolor(this.value)'/>Blue<br>"
  puts $x3dFile "<input type='radio' name='bgcolor' value='.8 .8 .8' $bgcheck3 onclick='BGcolor(this.value)'/>Gray<br>"
  puts $x3dFile "<input type='radio' name='bgcolor' value='0 0 0' onclick='BGcolor(this.value)'/>Black"

# transparency slider
  set max 0
  set transFunc 0
  if {$viz(PRT) || $viz(TPG) || \
     ($viz(FEA) && ([info exists entCount(surface_3d_element_representation)] || [info exists entCount(volume_3d_element_representation)]))} {
    set max 1
  }
  if {$max == 1} {
    puts $x3dFile "\n<!-- Transparency slider -->\n<p>Transparency<br>(approximate)<br>"
    puts $x3dFile "<input style='width:80px' type='range' min='0' max='$max' step='0.1' value='0' onchange='matTrans(this.value)'/>"
    set transFunc 1
  }

# mouse message
  puts $x3dFile "\n<p><b>Page Down/Up for Viewpoints.</b>  Key 'r' to restore, 'a' to view all.  <a href=\"https://www.x3dom.org/documentation/interaction/\">Use the mouse</a> in 'Examine Mode' to rotate, pan, zoom."
  puts $x3dFile "</td></tr></table>"

# -------------------------------------------------------------------------------
# function for PRT, sketch, EDG, part names
  if {$viz(PRT)} {
    x3dSwitchScript PRT

    if {[info exists nsketch]} {
      if {$nsketch > -1} {puts $x3dFile "\n<!-- SKH switch -->\n<script>function togSKH\(choice\)\{"}
      for {set i 0} {$i <= $nsketch} {incr i} {
        puts $x3dFile " if (!document.getElementById('swSketch$i').checked) \{document.getElementById('swSketch$i').setAttribute('whichChoice', -1);\} else \{document.getElementById('swSketch$i').setAttribute('whichChoice', 0);\}"
        puts $x3dFile " document.getElementById('swSketch$i').checked = !document.getElementById('swSketch$i').checked;"
      }
      if {$nsketch > -1} {puts $x3dFile "\}</script>"}
    }

    if {$opt(partEdges)} {
      puts $x3dFile "\n<!-- EDG switch -->\n<script>function togEDG\(choice\)\{"
      puts $x3dFile " if \(!document.getElementById\('swEDG'\).checked\) \{document.getElementById\('mat1'\).setAttribute\('transparency', 1\);\} else \{document.getElementById\('mat1'\).setAttribute\('transparency', 0\);\}\n\}</script>"
    }

    if {[info exists x3dParts]} {
      if {[llength [array names x3dParts]] > 1} {
        foreach item [array names x3dParts] {
          x3dSwitchScript Part$x3dParts($item)
        }
      }
    }
  }

# switch functions for fem
  if {$viz(FEA)} {
    x3dSwitchScript Nodes
    if {[info exists entCount(surface_3d_element_representation)] || \
        [info exists entCount(volume_3d_element_representation)]}  {x3dSwitchScript Mesh}
    if {[info exists entCount(curve_3d_element_representation)]}   {x3dSwitchScript 1DElements}
    if {[info exists entCount(surface_3d_element_representation)]} {x3dSwitchScript 2DElements}
    if {[info exists entCount(volume_3d_element_representation)]}  {x3dSwitchScript 3DElements}
  }

# function for TPG
  if {$viz(TPG)} {
    if {[string first "occurrence" $ao] == -1} {
      x3dSwitchScript TPG
      if {$viz(TED)} {x3dSwitchScript TED}
    }
  }

# function for SMG
  if {$viz(SMG)} {x3dSwitchScript SMG}

# function for DTR
  if {$viz(DTR)} {x3dSwitchScript DTR}

# function for holes
  if {$viz(HOL)} {x3dSwitchScript Hole}

# functions for PMI
  if {$viz(PMI)} {
    if {[llength $savedViewButtons] > 0} {
      puts $x3dFile " "
      foreach svn $savedViewButtons {x3dSwitchScript View[lsearch $savedViewNames $svn] $svMap($svn)}
    }
  }
  if {[info exists savedViewNone]} {x3dSwitchScript PMI}
  catch {unset savedViewNone}

# functions for FEA buttons
  if {$viz(FEA)} {feaButtons 2}

# background function
  puts $x3dFile "\n<!-- Background function -->\n<script>function BGcolor(color){document.getElementById('BG').setAttribute('skyColor', color);}</script>"

# axes function
  x3dSwitchScript Axes

# transparency function
  set numTessColor 0
  if {$viz(TPG)} {set numTessColor [tessCountColors]}
  if {$transFunc} {
    puts $x3dFile "\n<!-- Transparency function -->\n<script>function matTrans(trans){"

# part geometry
    if {$viz(PRT)} {
      if {[info exists x3dApps]} {
        foreach n [lrmdups [lsort -integer $x3dApps]] {
          if {!$opt(partEdges) || $n != 1} {puts $x3dFile " document.getElementById('mat$n').setAttribute('transparency', trans);"}
        }
      }
    }

# tessellated geometry
    for {set i 1} {$i <= $numTessColor} {incr i} {puts $x3dFile " document.getElementById('matTess$i').setAttribute('transparency', trans);"}

# finite element model
    if {$viz(FEA)} {
      if {[info exists entCount(surface_3d_element_representation)]} {
        puts $x3dFile " document.getElementById('mat2Dfem').setAttribute('transparency', trans);"
      }
      if {[info exists entCount(volume_3d_element_representation)]}  {
        puts $x3dFile " document.getElementById('mat3Dfem').setAttribute('transparency', trans);"
        puts $x3dFile " if (trans > 0) {document.getElementById('faces').setAttribute('solid', true);} else {document.getElementById('faces').setAttribute('solid', false);}"
      }
    }
    puts $x3dFile "}\n</script>"
  }

  puts $x3dFile "</font></body></html>"
  close $x3dFile
  update idletasks

# unset variables
  foreach var [list x3dCoord x3dFile x3dIndex x3dMax x3dMin x3dShape x3dStartFile] {catch {unset $var}}
}

# -------------------------------------------------------------------------------
# B-rep part geometry
proc x3dBrepGeom {} {
  global brepFile brepFileName buttons defaultColor localName mytemp nistVersion nsketch opt viz wdir
  global x3dApps x3dBbox x3dMax x3dMin x3dMsg x3dMsgColor x3dParts

# copy stp2x3d files to temp directory, DLLs in sp2x3d-dll.zip, exe in stp2x3d-part.exe
  if {[catch {
    if {$opt(DEBUGX3D)} {getTiming x3dBrepGeom}
    foreach fn {stp2x3d-dll.zip stp2x3d-part.exe} {
      set internal [file join $wdir exe $fn]
      set stp2x3d [file join $mytemp $fn]
      if {[file exists $internal]} {
        set copy 0
        if {![file exists $stp2x3d]} {
          set copy 1
        } elseif {[file mtime $internal] > [file mtime $stp2x3d]} {
          set copy 1
        }
        if {$copy} {if {$opt(DEBUGX3D)} {outputMsg "copy $stp2x3d"}; file copy -force -- $internal $stp2x3d}
      }
    }

# extract DLLs from zip file
    set stp2x3dz [file join $mytemp stp2x3d-dll.zip]
    if {[file exists $stp2x3dz]} {
      if {[catch {
        vfs::zip::Mount $stp2x3dz stp2x3d-dll
        foreach file [glob -nocomplain stp2x3d-dll/*] {
          set fn [file join $mytemp [file tail $file]]
          set copy 0
          if {![file exists $fn]} {
            set copy 1
          } elseif {[file mtime $file] > [file mtime $fn]} {
            set copy 1
          }
          if {$copy} {if {$opt(DEBUGX3D)} {outputMsg "copy $file"}; file copy -force -- $file $fn}
        }
        if {$opt(DEBUGX3D)} {getTiming "copy and extract"}
      } emsg]} {
        if {$nistVersion} {errorMsg " ERROR extracting DLLs for stp2x3d-part.exe: $emsg"}
      }
    }

# generate x3d from b-rep geometry with stp2x3d-part
    set stp2x3d [file join $mytemp stp2x3d-part.exe]
    if {[file exists $stp2x3d]} {

# output .x3d file name
      set stpx3dFileName [string range $localName 0 [string last "." $localName]]
      append stpx3dFileName "x3d"
      catch {file delete -force -- $stpx3dFileName}

# output dir for stp2x3d-part, delete if it exists
      set ftail [file tail [file rootname $localName]]
      set msg " Processing STEP part geometry"
      if {[info exists buttons]} {
        set fsize [file size $localName]
        if {$fsize > 50000000} {
          append msg ".  Please wait, it could take several minutes for large STEP files."
        } elseif {$fsize > 10000000} {
          append msg ", please wait."
        }
      }
      outputMsg $msg $x3dMsgColor

# run stp2x3d-part.exe
      if {$opt(DEBUGX3D)} {getTiming}
      catch {exec $stp2x3d --input [file nativename $localName] --quality $opt(partQuality) --edge $opt(partEdges) --sketch $opt(partSketch) --normal $opt(partNormals)} errs
      if {$opt(DEBUGX3D)} {getTiming stp2x3d; outputMsg $errs red}

# done processing
      if {[string first "STEP to X3D completed!" $errs] != -1} {
        if {[file exists $stpx3dFileName]} {
          if {[file size $stpx3dFileName] > 0} {
            set sketch 0
            set nind {}
            set x3dApps {}

# check for conversion units, mm > inch
            set sc [x3dBrepUnits]

# get min and max, number of materials, indents used to add Switch nodes
            set x3dBbox ""
            foreach line [split $errs "\n"] {
              if {[string first "No color will be supported." $line] != -1} {outputMsg "  Using [lindex $defaultColor 1] for the part color" red}

              set sline [split [string trim $line] " "]
              if {[string first "MinXYZ" $line] != -1} {
                append x3dBbox "<br>Min:"
                foreach id1 {1 2 3} id2 {x y z} {
                  set x3dMin($id2) [expr {$sc*[lindex $sline $id1]}]
                  set num [lindex $sline $id1]
                  set prec 3
                  if {[expr {abs($num)}] >= 100.} {set prec 2}
                  set num [trimNum $num $prec]
                  if {[expr {abs($num)}] > 1.e8} {
                    set num "?"
                    errorMsg " Part min/max XYZ coordinate too small/large" red
                  }
                  append x3dBbox "&nbsp;&nbsp;$num"
                }
              } elseif {[string first "MaxXYZ" $line] != -1} {
                append x3dBbox "<br>Max:"
                foreach id1 {1 2 3} id2 {x y z} {
                  set x3dMax($id2) [expr {$sc*[lindex $sline $id1]}]
                  set num [lindex $sline $id1]
                  set prec 3
                  if {[expr {abs($num)}] >= 100.} {set prec 2}
                  set num [trimNum $num $prec]
                  if {[expr {abs($num)}] > 1.e8} {
                    set num "?"
                    errorMsg " Part min/max XYZ coordinate too small/large" red
                  }
                  append x3dBbox "&nbsp;&nbsp;$num"
                }
              } elseif {[string first "Number of Materials" $line] != -1} {
                set napps [string trim [string range $line [string last " " $line] end]]
                for {set i 0} {$i < $napps} {incr i} {lappend x3dApps $i}
              } elseif {[string first "indent" $line] != -1} {
                lappend nind [lindex $sline 3]
              } elseif {[string first "Sketch geometry" $line] != -1} {
                set sketch 1
              }
            }
            if {$x3dBbox != ""} {set x3dBbox "Part Bounding Box$x3dBbox"}

# determine assembly level to insert Switch nodes
            set ilast 1
            set lastLevel 1
            for {set i 0} {$i < [llength $nind]} {incr i} {
              set j $i
              set level [lindex $nind $i]
              if {$level < $lastLevel || ($level > 100 && $i > 1)} {
                set level $lastLevel
                set j [expr {$i-1}]
                break
              }
              set lastLevel $level
            }
            incr j
            set space "[string repeat " " $j]<"
            if {$opt(DEBUGX3D)} {outputMsg "$nind\n$j $level" red}

# open temp file
            set brepFileName [file join $mytemp brep.txt]
            set brepFile [open $brepFileName w]

# integrate x3d from stp2x3d-part with existing x3dom file
            set str "\n<!-- PART GEOMETRY -->\n<Switch whichChoice='0' id='swPRT'>"
            if {$sc != 1} {
              append str "<Transform scale='$sc $sc $sc' onclick=handleGroupClick(event)'>"
            } else {
              append str "<Group onclick='handleGroupClick(event)'>"
            }
            puts $brepFile $str
            set stpx3dFile [open $stpx3dFileName r]
            set write 0
            set shape 0
            set npart -1
            set nsketch -1
            set oksketch 0
            set close 0
            catch {unset parts}
            if {![info exists viz(EDG)]} {set viz(EDG) 0}

# process all lines in file
            outputMsg " Processing X3D output" $x3dMsgColor; update
            while {[gets $stpx3dFile line] >= 0} {
              if {$write} {
                if {[string first "Scene" $line] != -1} {set write 0}
              } elseif {[string first "Scene" $line] != -1} {
                gets $stpx3dFile line
                set write 1
              }
              if {!$shape} {
                if {[string first "Shape" $line] != -1} {set shape 1}
              }

# write
              if {$write} {

# Shape
                if {[string first "<Shape" $line] != -1} {

# check for edges
                  if {!$viz(EDG)} {if {[string first "edge" $line] != -1} {set viz(EDG) 1}}

# add Switch for sketch geometry
                  if {$sketch} {
                    set c1 [string first "<Shape>" $line]
                    if {$c1 != -1} {
                      incr nsketch
                      set line "\n<!-- sketch geometry $nsketch -->\n[string repeat " " $c1]<Switch id='swSketch$nsketch' whichChoice='0'>[string range $line $c1 end]"
                      set oksketch 1
                    }
                  }

# handle Unicode characters on Shape id with X and X2 control directive
                  if {[string first "\\X" $line] != -1} {
                    set c1 [string first "'" $line]
                    set c2 [string first "'" [string range $line $c1+1 end]]
                    set id [string range $line $c1+1 $c1+$c2]
                    set cx [string first "\\X" $id]
                    if {$cx != -1} {set id [x3dUnicode $id]}
                    set line [string range $line 0 $c1]$id[string range $line [expr {$c1+$c2+1}] end]
                  }
                }

# only check lines with correct number of spaces at beginning of line
                if {[string first $space $line] == 0} {

# close the Switch-Group
                  if {$close && [string first "$space/" $line] == 0} {
                    append line "\n$space\/Group></Switch>"
                    set close 0

# get id name of Transform and use for Switch
                  } elseif {[string first "Transform" $line] != -1} {
                    set c1 [string first "'" $line]
                    set c2 [string first "'" [string range $line $c1+1 end]]
                    if {$c2 == -1} {
                      errorMsg " ERROR reading a text string in the X3D file.  The View might be missing parts.\n$line"
                      append line "'>"
                      set c2 [string first "'" [string range $line $c1+1 end]]
                      lappend x3dMsg "<b>Some Part Geometry might be missing.</b>"
                    }
                    incr npart
                    set id [string range $line $c1+1 $c1+$c2]
                    set cx [string first "\\X" $id]
                    if {$cx != -1} {set id [x3dUnicode $id]}
                    if {$opt(DEBUGX3D)} {outputMsg $id blue}
                    set parts($id) $npart
                    set line "$space\Switch id='swPart$npart' whichChoice='0'><Group>\n$line"
                    set close 1

# get DEF name of Group and use for Switch
                  } elseif {[string first "Group" $line] != -1} {
                    set close1 0
                    if {[string first "Group" $line] != [string last "Group" $line]} {set close1 1}
                    set c1 [string first "'" $line]
                    set c2 [string last  "'" $line]
                    if {$c1 == $c2} {
                      errorMsg " ERROR reading a text string in the X3D file.  The View might be missing parts.\n$line"
                      append line "'>"
                      set c2 [string first "'" [string range $line $c1+1 end]]
                      lappend x3dMsg "<b>Some Part Geometry might be missing.</b>"
                    }
                    incr npart
                    set id [string range $line $c1+1 $c2-1]

# increment Group name _n
                    if {[info exists parts($id)]} {
                      if {$opt(DEBUGX3D)} {outputMsg $id green}
                      for {set i 1} {$i < 99} {incr i} {
                        set c1 [string last "_" $id]
                        if {$c1 != -1} {
                          set nid "[string range $id 0 $c1]$i"
                        } else {
                          set nid "$id\_$i"
                        }
                        if {![info exists parts($nid)]} {
                          set id $nid
                          if {$opt(DEBUGX3D)} {outputMsg $id red}
                          break
                        }
                      }
                    }

                    if {[string first "swSketch" $line] == -1} {
                      set cx [string first "\\X" $id]
                      if {$cx != -1} {set id [x3dUnicode $id]}
                      set parts($id) $npart
                      set line "$space\Switch id='swPart$npart' whichChoice='0'><Group>\n$line"
                    }
                    if {$close1} {
                      append line "\n$space\/Group></Switch>"
                    } else {
                      set close 1
                    }
                  }
                }

# end Switch for sketch geometry
                if {$oksketch} {
                  set c1 [string first "</Shape>" $line]
                  if {$c1 != -1} {
                    set line "$line</Switch>\n"
                    set oksketch 0
                  }
                }

# write line
                puts $brepFile $line
              }
            }

# check for duplicate part names in parts for x3dParts
            catch {unset x3dParts}
            if {[info exists parts]} {
              foreach name [lsort [array names parts]] {
                if {$opt(DEBUGX3D)} {outputMsg $name}

# S control directive
                if {[string first "\\S\\" $name] != -1} {errorMsg " The \\S\\ control directive is ignored for accented characters.  See Help > Text Strings" red}

# check for _n at end of name
                if {[string index $name end-1] == "_" || [string index $name end-2] == "_" || [string index $name end-3] == "_"} {

# remove _n
                  set c1 [string last "_" $name]
                  set name1 [string range $name 0 $c1-1]
                  if {$opt(DEBUGX3D)} {outputMsg $name1 red}

# add to x3dParts
                  if {[string range $name $c1 end] == "_1" && ![info exists parts($name1)]} {
                    set x3dParts($name1) $parts($name)
                  } else {
                    if {[lsearch [array names x3dParts] $name1] != -1} {
                      append x3dParts($name1) " $parts($name)"
                    } else {
                      set x3dParts($name) $parts($name)
                    }
                  }
                } else {
                  set x3dParts($name) $parts($name)
                }
              }
            }
            if {$opt(DEBUGX3D)} {foreach idx [array names x3dParts] {outputMsg "$idx $x3dParts($idx)" blue}}

# no shapes
            set viz(PRT) 1
            if {!$shape} {
              set viz(PRT) 0
              errorMsg " There is no B-rep Part Geometry to view in the STEP file.  There might be Tessellated Part Geometry.  Check the View selections on the Options tab."
            }

# end the brep file
            if {$sc == 1} {
              puts $brepFile "</Group></Switch>"
            } else {
              puts $brepFile "</Transform></Switch>"
            }

            close $stpx3dFile
          }

# no X3D output
        } else {
          errorMsg " ERROR: Cannot find the part geometry (X3D file) output from stp2x3d-part.exe"
        }

# delete X3D file
        if {!$opt(DEBUGX3D) && !$opt(x3dKeep)} {
          catch {file delete -force -- $stpx3dFileName}

# keep for debugging
        } else {
          set newnam "[file rootname $localName].x3d"
          if {$stpx3dFileName != $newnam} {
            file copy -force -- $stpx3dFileName $newnam
            catch {file delete -force -- $stpx3dFileName}
          }
        }

# errors running stp2x3d
      } elseif {[string first "Nothing to translate" $errs] != -1} {
        if {$opt(partOnly)} {
          errorMsg " No part geometry in the STEP file."
          lappend x3dMsg "<b>No part geometry in the STEP file</b>"
        }
      } else {
        outputMsg $errs red
        errorMsg "Error generating X3D from the STEP part geometry.\n Try another STEP file viewer.  See Websites > STEP File Viewers\n Use F8 to run the Syntax Checker to check for STEP file errors.  See Help > Syntax Checker"
        outputMsg " "
        lappend x3dMsg "<b>Error generating STEP part geometry</b>"
      }
    } else {
      set msg " ERROR: The program (stp2x3d-part.exe) to convert STEP part geometry to X3D was not found in $mytemp"
      if {!$nistVersion} {append msg "\n  You must first run the NIST version of the STEP File Analyzer and Viewer before generating a View."}
      errorMsg $msg
    }
  } emsg]} {
    errorMsg " ERROR generating Part Geometry: $emsg"
  }
}

# -------------------------------------------------------------------------------
# process X and X2 control directives with Unicode characters
proc x3dUnicode {id} {
  global unicode

  foreach x {X X2} {
    set cx [string first "\\$x\\" $id]
    if {$cx != -1} {
      switch -- $x {
        X {
          while {$cx != -1} {
            set xu "&#x[string range $id $cx+3 $cx+4];"
            set id [string range $id 0 $cx-1]$xu[string range $id $cx+5 end]
            set cx [string first "\\$x\\" $id]
            if {[info exists unicode] == 0} {errorMsg " Unicode characters are used for some part or assembly names.  See Help > Text Strings" red}
          }
        }
        X2 {
          while {$cx != -1} {
            set xu ""
            for {set i 4} {$i < 200} {incr i 4} {
              set uc [string range $id $cx+$i [expr {$cx+$i+3}]]
              if {[string first "\\" $uc] == -1} {
                append xu "&#x$uc;"
              } else {
                set cx0 [string first "\\X0\\" $id]
                set id [string range $id 0 $cx-1]$xu[string range $id $cx0+4 end]
                break
              }
            }
            set cx [string first "\\$x\\" $id]
            if {[info exists unicode] == 0} {errorMsg " Unicode characters are used for some part or assembly names.  See Help > Text Strings" red}
          }
        }
      }
    }
  }
  return $id
}

# -------------------------------------------------------------------------------
# check for conversion units, mm > inch
proc x3dBrepUnits {} {
  global objDesign
  if {![info exists objDesign]} {return 1}

  set sc 1
  set a2 ""
  ::tcom::foreach e0 [$objDesign FindObjects [string trim advanced_brep_shape_representation]] {
    set e1 [[[$e0 Attributes] Item [expr 3]] Value]
    set a2 [[$e1 Attributes] Item [expr 5]]
    if {$a2 == ""} {set a2 [[$e1 Attributes] Item [expr 4]]}
  }
  if {$a2 == "" && ![info exists entCount(advanced_brep_shape_representation)]} {
    ::tcom::foreach e0 [$objDesign FindObjects [string trim geometric_representation_context_and_global_uncertainty_assigned_context_and_global_unit_assigned_context]] {
      set a2 [[$e0 Attributes] Item [expr 5]]
    }
  }
  if {$a2 != ""} {
    foreach e3 [$a2 Value] {
      if {[$e3 Type] == "conversion_based_unit_and_length_unit"} {
        set e4 [[[$e3 Attributes] Item [expr 3]] Value]
        set cf [[[$e4 Attributes] Item [expr 1]] Value]
        set sc [trimNum [expr {1./$cf}] 5]
      }
    }
  }
  return $sc
}

# -------------------------------------------------------------------------------
# write tessellated geometry for annotations and parts
proc x3dTessGeom {objID objEntity1 ent1} {
  global ao defaultColor draftModelCameras entCount opt recPracNames savedViewFile savedViewNames savedViewNone shapeRepName shellSuppGeom spaces srNames
  global tessCoord tessCoordID tessIndex tessIndexCoord tessPartFile tessPlacement tessRepo tessSuppGeomFile
  global x3dColor x3dColorFile x3dColors x3dCoord x3dFile x3dIndex x3dMsg

  set x3dIndex $tessIndex($objID)
  set x3dCoord $tessCoord($tessIndexCoord($objID))

  if {$x3dColor == ""} {
    set x3dColor "0 0 0"
    if {[string first "annotation" [$objEntity1 Type]] != -1} {
      errorMsg "Syntax Error: Missing PMI Presentation color (using black).$spaces\($recPracNames(pmi242), Sec. 8.5, Fig. 84)"
    }
  }
  set x3dIndexType "line"
  set solid ""
  set emit "emissiveColor='$x3dColor'"
  set spec ""
  set x3dSolid 0

# faces
  if {[string first "face" $ent1] != -1} {
    set x3dIndexType "face"
    set solid "solid='false'"

# tessellated part geometry
    if {$ao == "tessellated_solid" || $ao == "tessellated_shell"} {
      set tsID [$objEntity1 P21ID]
      set tessRepo 0
      set x3dSolid 1

# set default color
      set x3dColor [lindex $defaultColor 0]
      tessSetColor $objEntity1 $tsID
      set spec "specularColor='[vectrim [vecmult $x3dColor 0.2]]'"
      set emit ""

# set placement for tessellated part geometry in assemblies (axis and ref_direction)
      if {[info exists entCount(item_defined_transformation)]} {tessSetPlacement $objEntity1 $tsID}
    }
  }

# write transform based on placement
  catch {unset endTransform}
  set nplace 0
  if {[info exists tessRepo]} {
    if {$tessRepo && [info exists tessPlacement(origin)]} {set nplace [llength $tessPlacement(origin)]}
  }
  if {$nplace == 0} {set nplace 1}

# file list where to write geometry
  set nosv 1
  set flist $x3dFile
  if {$ao == "tessellated_solid" || $ao == "tessellated_shell"} {
    set flist $tessPartFile
    if {$ao == "tessellated_shell" && [info exists shellSuppGeom]} {if {$shellSuppGeom} {set flist $tessSuppGeomFile}}
    set nosv 0
  }

# multiple saved views, write PMI to individual files, collected in x3dViewpoint below
  if {[info exists draftModelCameras] && $ao == "tessellated_annotation_occurrence"} {
    set savedViewName [getSavedViewName $objEntity1]
    if {[llength $savedViewName] > 0} {
      set flist {}
      foreach svn $savedViewName {
        set svn1 "View[lsearch $savedViewNames $svn]"
        if {[info exists savedViewFile($svn1)]} {lappend flist $savedViewFile($svn1)}
      }
      set nosv 0
    }
  }

# PMI not in a saved view
  if {$nosv} {
    incr savedViewNone
    if {$savedViewNone == 1} {puts $x3dFile "\n<!-- PMI not in a saved view -->\n<Switch whichChoice='0' id='swPMI'><Group>"}
  }

# loop over list of files from above
  foreach f $flist {

# multiple saved view color
    if {[info exists savedViewName]} {
      if {$opt(gpmiColor) == 3 && [llength $savedViewNames] > 1} {
        if {![info exists x3dColorFile($f)]} {set x3dColorFile($f) [x3dSetPMIColor $opt(gpmiColor) 1]}
        set x3dColor $x3dColorFile($f)
        set emit "emissiveColor='$x3dColor'"
      }
    }

# loop over placements, if any
    for {set np 0} {$np < $nplace} {incr np} {
      set srName ""
      if {![info exists shapeRepName]} {
        set shapeRepName $x3dIndexType
        if {[info exists tsID]} {set srName "[string toupper $ao] $tsID"}
      } elseif {$shapeRepName != "line" && $shapeRepName != "face"} {
        set srName $shapeRepName
      }
      if {$srName != ""} {
        incr srNames($srName)
        if {$srNames($srName) == 1} {puts $f "\n<!-- $srName -->"}
      }

# translation and rotation (sometimes PMI and usually assemblies)
      if {$tessRepo && [info exists tessPlacement(origin)]} {
        set transform [x3dTransform [lindex $tessPlacement(origin) $np] [lindex $tessPlacement(axis) $np] [lindex $tessPlacement(refdir) $np] "tessellated geometry"]
        puts $f $transform
        set endTransform "</Transform>"
      }

# write tessellated face or line
      if {$np == 0} {
        set defstr ""
        if {$nplace > 1} {set defstr " DEF='$shapeRepName$objID'"}

        if {$emit == ""} {
          set matID ""
          set colorID [lsearch $x3dColors $x3dColor]
          if {$colorID == -1} {
            lappend x3dColors $x3dColor
            puts $f "<Shape$defstr><Appearance DEF='appTess[llength $x3dColors]'><Material id='matTess[llength $x3dColors]' diffuseColor='$x3dColor' $spec></Material></Appearance>"
          } else {
            puts $f "<Shape$defstr><Appearance USE='appTess[incr colorID]'></Appearance>"
          }
        } else {
          if {$x3dIndexType == "face"} {
            puts $f "<Shape$defstr><Appearance><Material diffuseColor='$x3dColor' emissiveColor='$x3dColor' shininess='0'></Material></Appearance>"
          } else {
            puts $f "<Shape$defstr><Appearance><Material $emit></Material></Appearance>"
          }
        }

        set indexedSet "<Indexed[string totitle $x3dIndexType]\Set $solid coordIndex='[string trim $x3dIndex]'>"

        if {[lsearch $tessCoordID $tessIndexCoord($objID)] == -1} {
          lappend tessCoordID $tessIndexCoord($objID)
          puts $f " $indexedSet\n  <Coordinate DEF='coord$tessIndexCoord($objID)' point='[string trim $x3dCoord]'></Coordinate></Indexed[string totitle $x3dIndexType]\Set></Shape>"
        } else {
          puts $f " $indexedSet<Coordinate USE='coord$tessIndexCoord($objID)'></Coordinate></Indexed[string totitle $x3dIndexType]\Set></Shape>"
        }

# reuse shape
      } else {
        puts $f "<Shape USE='$shapeRepName$objID'></Shape>"
      }

# for tessellated part geometry only, write mesh based on faces
      if {$opt(tessPartMesh) || ($ao == "tessellated_shell" && [info exists entCount(tessellated_solid)])} {
        if {$x3dIndexType == "face" && ($ao == "tessellated_solid" || $ao == "tessellated_shell")} {
          if {$np == 0} {
            set x3dMesh ""

# write individual edges
            set edges {}
            for {set i 0} {$i < [llength $x3dIndex]} {incr i 4} {
              lappend edges [lsort "[lindex $x3dIndex $i] [lindex $x3dIndex $i+1]"]
              lappend edges [lsort "[lindex $x3dIndex $i+1] [lindex $x3dIndex $i+2]"]
              lappend edges [lsort "[lindex $x3dIndex $i] [lindex $x3dIndex $i+2]"]
            }

# try to combine some edges and write mesh
            set edges [lsort [lrmdups $edges]]
            for {set i 0} {$i < [llength $edges]} {incr i} {
              set edge [lindex $edges $i]
              set nedge [lindex $edges $i+1]
              if {[lindex $edge 1] == [lindex $nedge 0]} {
                set edge [lappend edge [lindex $nedge 1]]
                incr i
              } elseif {[lindex $edge 0] == [lindex $nedge 0]} {
                set edge [concat [lindex $nedge 1] $edge]
                incr i
              }
              append x3dMesh "$edge -1 "
            }

# write mesh
            set ecolor ""
            foreach c [split $x3dColor] {append ecolor "[expr {$c*.5}] "}
            if {$ao == "tessellated_shell" && [info exists entCount(tessellated_solid)]} {
              set ecolor "0 0 0"
              set msg "Triangular faces in tessellated shells are outlined in black."
              if {[lsearch $x3dMsg $msg] == -1} {lappend x3dMsg $msg}
            }

            set defstr ""
            if {$nplace > 1} {set defstr " DEF='mesh$objID'"}
            puts $f "<Shape$defstr><Appearance><Material emissiveColor='$ecolor'></Material></Appearance>"
            puts $f " <IndexedLineSet coordIndex='[string trim $x3dMesh]'><Coordinate USE='coord$tessIndexCoord($objID)'></Coordinate></IndexedLineSet></Shape>"
          } else {
            puts $f "<Shape USE='mesh$objID'></Shape>"
          }
        }
      }

# end transform
      if {[info exists endTransform]} {puts $f $endTransform}
    }
  }
  set x3dCoord ""
  set x3dIndex ""
  update idletasks
}

# -------------------------------------------------------------------------------
# datum targets
proc x3dDatumTarget {maxxyz} {
  global datumTargetView dttype viz x3dFile x3dMsg

  outputMsg " Processing datum targets" green
  puts $x3dFile "\n<!-- DATUM TARGETS -->\n<Switch whichChoice='0' id='swDTR'><Group>"

  set dttype ""
  foreach idx [array names datumTargetView] {
    set shape [lindex $datumTargetView($idx) 0]
    set color "1 0 0"
    set feat ""
    if {[string first "feature" $idx] != -1} {
      set color "0 .5 0"
      set feat " feature"
    }
    set endTransform 0

# check for handle
    if {[string first "handle" $shape] == -1} {
      set e3 ""

# position and orientation
      set origin [lindex [lindex $datumTargetView($idx) 1] 0]
      set axis   [lindex [lindex $datumTargetView($idx) 1] 1]
      set refdir [lindex [lindex $datumTargetView($idx) 1] 2]
      if {$origin == "0. 0. 0."} {
        set msg "Datum target(s) located at the origin."
        if {[lsearch $x3dMsg $msg] == -1} {lappend x3dMsg $msg}
      }

# handle, then shape is with geometric entity (cartesian_point, line, and circle are supported)
    } else {
      set e3 [lindex $datumTargetView($idx) 0]
      set shape [$e3 Type]
      if {$shape == "trimmed_curve"} {
        set e3 [[[$e3 Attributes] Item [expr 2]] Value]
        if {[$e3 Type] == "line"}   {set shape [$e3 Type]}
        if {[$e3 Type] == "circle"} {set shape "circular curve"}
      } elseif {$shape == "circle"} {
        set shape "circular curve"
      }
    }

# text
    set textOrigin "0 0 0"
    set target [lindex $datumTargetView($idx) end]
    set len [string length $target]
    if {$len < 2 || $len > 5 || ![string is alpha [string index $target 0]]} {set target ""}
    set textJustify "BEGIN"
    if {$e3 != ""} {set textJustify "END"}
    if {$target != ""} {puts $x3dFile "<!-- $target -->"}

# process different shapes
    if {[catch {
      switch -- $shape {
        point -
        cartesian_point {
# generate point
          set rad [trimNum [expr {$maxxyz*0.00125}]]
          if {$e3 != ""} {set origin [vectrim [[[$e3 Attributes] Item [expr 2]] Value]]}
          puts $x3dFile "<Transform translation='$origin'><Shape><Appearance><Material diffuseColor='$color' emissiveColor='$color'></Material></Appearance><Sphere radius='$rad'></Sphere></Shape>"
          set target " $target"
          set viz(DTR) 1
          set endTransform 1
        }

        line {
# generate line
          if {$e3 == ""} {
            puts $x3dFile [x3dTransform $origin $axis $refdir "$shape datum target"]
            set x [trimNum [lindex [lindex $datumTargetView($idx) 2] 1]]
            puts $x3dFile " <Shape><Appearance><Material emissiveColor='$color'></Material></Appearance><IndexedLineSet coordIndex='0 1 -1'><Coordinate point='0 0 0 $x 0 0'></Coordinate></IndexedLineSet></Shape>"
            set textOrigin "[trimNum [expr {$x*0.5}]] 0 0"
            set endTransform 1
          } else {
            set e4 [[[$e3 Attributes] Item [expr 2]] Value]
            set coord1 [vectrim [[[$e4 Attributes] Item [expr 2]] Value]]
            set e5 [[[$e3 Attributes] Item [expr 3]] Value]
            set mag [[[$e5 Attributes] Item [expr 3]] Value]
            set e6 [[[$e5 Attributes] Item [expr 2]] Value]
            set dir [[[$e6 Attributes] Item [expr 2]] Value]
            set coord2 [vectrim [vecadd $coord1 [vecmult $dir $mag]]]
            puts $x3dFile "<Shape><Appearance><Material emissiveColor='$color'></Material></Appearance><IndexedLineSet coordIndex='0 1 -1'><Coordinate point='$coord1 $coord2'></Coordinate></IndexedLineSet></Shape>"
            set textOrigin [vectrim [vecmult [vecadd $coord1 $coord2] 0.5]]
          }
          set viz(DTR) 1
        }

        rectangle {
# generate rectangle
          puts $x3dFile [x3dTransform $origin $axis $refdir "$shape datum target"]
          foreach i {2 3} {
            set type [lindex $datumTargetView($idx) $i]
            switch -- [lindex $type 0] {
              "target length" {set x [trimNum [expr {[lindex $type 1]*0.5}]]}
              "target width"  {set y [trimNum [expr {[lindex $type 1]*0.5}]]}
            }
          }
          puts $x3dFile " <Shape><Appearance><Material emissiveColor='$color'></Material></Appearance><IndexedLineSet coordIndex='0 1 2 3 0 -1'><Coordinate point='-$x -$y 0 $x -$y 0 $x $y 0 -$x $y 0'></Coordinate></IndexedLineSet></Shape>"
          puts $x3dFile " <Shape><Appearance><Material diffuseColor='$color' transparency='0.8'></Material></Appearance><IndexedFaceSet solid='false' coordIndex='0 1 2 3 -1'><Coordinate point='-$x -$y 0 $x -$y 0 $x $y 0 -$x $y 0'></Coordinate></IndexedFaceSet></Shape>"
          set endTransform 1
          set viz(DTR) 1
        }

        circle -
        "circular curve" {
# generate circle
          if {$e3 == ""} {
            set rad [trimNum [expr {[lindex [lindex $datumTargetView($idx) 2] 1]*0.5}]]
          } else {
            set e4 [[[$e3 Attributes] Item [expr 2]] Value]
            set rad [[[$e3 Attributes] Item [expr 3]] Value]
            set a2p3d [x3dGetA2P3D $e4]
            set origin [lindex $a2p3d 0]
            set axis   [lindex $a2p3d 1]
            set refdir [lindex $a2p3d 2]
          }
          puts $x3dFile [x3dTransform $origin $axis $refdir "$shape datum target"]
          set ns 48
          set angle 0.
          set dlt [expr {6.28319/$ns}]
          set index ""
          for {set i 0} {$i < $ns} {incr i} {append index "$i "}
          set coord ""
          for {set i 0} {$i < $ns} {incr i} {
            append coord "[trimNum [expr {$rad*cos($angle)}]] "
            append coord "[trimNum [expr {$rad*sin($angle)}]] "
            append coord "0 "
            set angle [expr {$angle+$dlt}]
          }
          puts $x3dFile " <Shape><Appearance><Material emissiveColor='$color'></Material></Appearance><IndexedLineSet coordIndex='$index 0 -1'><Coordinate point='$coord'></Coordinate></IndexedLineSet></Shape>"
          if {$shape == "circle"} {
            puts $x3dFile " <Shape><Appearance><Material diffuseColor='$color' transparency='0.8'></Material></Appearance><IndexedFaceSet solid='false' coordIndex='$index -1'><Coordinate point='$coord'></Coordinate></IndexedFaceSet></Shape>"
          } else {
            set textOrigin "$rad 0 0"
          }
          set endTransform 1
          set viz(DTR) 1
        }

        advanced_face {
# for advanced face, look for circles and lines
          set e1 $e3
          set e2 [[[$e1 Attributes] Item [expr 3]] Value]

# if in a plane, follow face_outer_bounds and face_bounds to ...
          if {[$e2 Type] == "plane"} {
            set e2s [[[$e1 Attributes] Item [expr 2]] Value]
            set igeom 0
            set coord ""
            set ncoord 0

# get number of face bounds
            set nbound 0
            ::tcom::foreach e2 $e2s {incr nbound}

            ::tcom::foreach e2 $e2s {
              set e3 [[[$e2 Attributes] Item [expr 2]] Value]
              set e4s [[[$e3 Attributes] Item [expr 2]] Value]

# get number and types of geometric entities defining the edges
              set ngeom 0
              set gtypes {}
              ::tcom::foreach e4 $e4s {
                incr ngeom
                set e5 [[[$e4 Attributes] Item [expr 4]] Value]
                set e6 [[[$e5 Attributes] Item [expr 4]] Value]
                if {[lsearch $gtypes [$e6 Type]] == -1} {lappend gtypes [$e6 Type]}
              }

# check for only multiple circles or ellipses
              set onlyCircle 0
              if {[llength $gtypes] == 1} {if {$gtypes == "circle" || $gtypes == "ellipse"} {set onlyCircle 1}}

              ::tcom::foreach e4 $e4s {
                set e5 [[[$e4 Attributes] Item [expr 4]] Value]
                set e6 [[[$e5 Attributes] Item [expr 4]] Value]
                incr igeom

# advanced face circle and ellipse edges
                if {[$e6 Type] == "circle" || [$e6 Type] == "ellipse"} {
                  if {$nbound == 1 && ($ngeom == 1 || $onlyCircle)} {
                    set rad [[[$e6 Attributes] Item [expr 3]] Value]
                    set scale ""

# check ellipse axes
                    if {[$e6 Type] == "ellipse"} {
                      set rad1 [[[$e6 Attributes] Item [expr 4]] Value]
                      set sy [expr {$rad1/$rad}]
                      set scale "1 $sy 1"
                      set dsy [trimNum [expr {abs($sy-1.)}]]
                      if {$dsy <= 0.05} {errorMsg " Datum target '[$e6 Type]' axes ($rad,$rad1) are almost identical."}
                    }

# transform for circle
                    if {!$onlyCircle || $igeom == 1} {
                      set a2p3d [x3dGetA2P3D [[[$e6 Attributes] Item [expr 2]] Value]]
                      puts $x3dFile [x3dTransform [lindex $a2p3d 0] [lindex $a2p3d 1] [lindex $a2p3d 2] "$shape circle datum target" $scale]
                    }

# generate coordinates
                    incr ncoord 48
                    set angle 0.
                    set dlt [expr {6.28319/$ncoord}]
                    for {set i 0} {$i < $ncoord} {incr i} {
                      append coord "[trimNum [expr {$rad*cos($angle)}]] "
                      append coord "[trimNum [expr {$rad*sin($angle)}]] "
                      append coord "0 "
                      set angle [expr {$angle+$dlt}]
                      if {$i == 0 && $igeom == 1} {set textOrigin $coord}
                    }
                    set endTransform 1
                  } else {
                    set msg "Datum target$feat edge defined by multiple types of curves is not supported."
                    errorMsg " $msg"
                    if {[lsearch $x3dMsg $msg] == -1} {lappend x3dMsg $msg}
                  }

# advanced face line edges
                } elseif {[$e6 Type] == "line"} {
                  set e7 [[[$e6 Attributes] Item [expr 2]] Value]
                  set pt [vectrim [[[$e7 Attributes] Item [expr 2]] Value]]
                  append coord "$pt "
                  incr ncoord
                  if {$ncoord == 1 && $igeom == 1} {set textOrigin $pt}

# not a circle or line
                } else {
                  set target ""
                  set msg "Datum target$feat edge defined by '[$e6 Type]' is not supported."
                  errorMsg " $msg"
                  if {[lsearch $x3dMsg $msg] == -1} {lappend x3dMsg $msg}
                }
              }
            }

# shape for circles and lines
            if {$coord != ""} {
              set index ""
              for {set i 0} {$i < $ncoord} {incr i} {append index "$i "}
              puts $x3dFile " <Shape><Appearance><Material emissiveColor='$color'></Material></Appearance><IndexedLineSet coordIndex='$index 0 -1'><Coordinate point='$coord'></Coordinate></IndexedLineSet></Shape>"
              puts $x3dFile " <Shape><Appearance><Material diffuseColor='$color' transparency='0.8'></Material></Appearance><IndexedFaceSet solid='false' coordIndex='$index -1'><Coordinate point='$coord'></Coordinate></IndexedFaceSet></Shape>"
              set viz(DTR) 1
            }

# non planes are not supported
          } else {
            set target ""
            set msg "Datum target$feat surface defined by '[$e2 Type]' is not supported."
            errorMsg " $msg"
            if {[lsearch $x3dMsg $msg] == -1} {lappend x3dMsg $msg}
          }
        }

        default {
          set target ""
          set msg "Datum target$feat defined by '$shape' is not supported."
          errorMsg " $msg"
          if {[lsearch $x3dMsg $msg] == -1} {lappend x3dMsg $msg}
        }
      }

# small coordinate triad
      if {$shape != "point" && $shape != "cartesian_point" && $shape != "advanced_face" && [string first "feature" $idx] == -1} {
        set size [trimNum [expr {$maxxyz*0.005}]]
        puts $x3dFile " <Shape><Appearance><Material emissiveColor='1 0 0'></Material></Appearance><IndexedLineSet coordIndex='0 1 -1'><Coordinate point='0. 0. 0. $size 0. 0.'></Coordinate></IndexedLineSet></Shape>"
        puts $x3dFile " <Shape><Appearance><Material emissiveColor='0 .5 0'></Material></Appearance><IndexedLineSet coordIndex='0 1 -1'><Coordinate point='0. 0. 0. 0. $size 0.'></Coordinate></IndexedLineSet></Shape>"
        puts $x3dFile " <Shape><Appearance><Material emissiveColor='0 0 1'></Material></Appearance><IndexedLineSet coordIndex='0 1 -1'><Coordinate point='0. 0. 0. 0. 0. $size'></Coordinate></IndexedLineSet></Shape>"
      }

# datum target label
      if {$target != ""} {
        set size [trimNum [expr {$maxxyz*0.01}]]
        set trans ""
        if {$textOrigin != "0 0 0"} {set trans " translation='$textOrigin'"}
        puts $x3dFile " <Transform$trans scale='$size $size $size'><Billboard axisOfRotation='0 0 0'><Shape><Text string='\"$target\"'><FontStyle family='\"SANS\"' justify='\"$textJustify\"'></FontStyle></Text><Appearance><Material diffuseColor='$color'></Material></Appearance></Shape></Billboard></Transform>"
      }

# end transform
      if {$endTransform} {puts $x3dFile "</Transform>"}

    } emsg]} {
      errorMsg "ERROR viewing a '$shape' datum target$feat ($target): $emsg"
    }
  }
  puts $x3dFile "</Group></Switch>"
  catch {unset datumTargetView}
  catch {unset dttype}
}

# -------------------------------------------------------------------------------
# supplemental geometry
proc x3dSuppGeom {maxxyz} {
  global cgrObjects axesDef planeDef recPracNames syntaxErr tessSuppGeomFile tessSuppGeomFileName trimVal x3dFile x3dMsg
  global objDesign
  if {![info exists objDesign]} {return}

  set size [trimNum [expr {$maxxyz*0.025}]]
  set tsize [trimNum [expr {$size*0.33}]]
  set axesDef {}
  set planeDef {}

  outputMsg " Processing supplemental geometry" green
  puts $x3dFile "\n<!-- SUPPLEMENTAL GEOMETRY -->\n<Switch whichChoice='0' id='swSMG'><Group>"
  if {![info exists cgrObjects]} {set cgrObjects [$objDesign FindObjects [string trim constructive_geometry_representation]]}
  ::tcom::foreach e0 $cgrObjects {
    set a1 [[$e0 Attributes] Item [expr 2]]

# process all items
    ::tcom::foreach e2 [$a1 Value] {
      if {[catch {
        set ename [$e2 Type]

        switch $ename {
          line -
          polyline {x3dSuppGeomLine $e2 $tsize $ename}
          circle -
          ellipse  {x3dSuppGeomCircle $e2 $tsize $ename}
          plane    {x3dSuppGeomPlane $e2 $size}
          cartesian_point     {x3dSuppGeomPoint $e2 $tsize}
          axis2_placement_3d  {x3dSuppGeomAxis $e2 $size $tsize}
          cylindrical_surface {x3dSuppGeomCylinder $e2 $tsize}

          trimmed_curve -
          composite_curve -
          geometric_curve_set {
            catch {unset trimVal}
            set trimmedCurves {}

# get trimmed curves
            if {$ename == "trimmed_curve"} {
              lappend trimmedCurves $e2

# composite_curve -> composite_curve_segment -> trimmed_curve
            } elseif {$ename == "composite_curve"} {
              ::tcom::foreach ccs [[[$e2 Attributes] Item [expr 2]] Value] {
                lappend trimmedCurves [[[$ccs Attributes] Item [expr 3]] Value]
              }

# geometric_curve_set -> list of trimmed_curve or composite_curve -> trimmed_curve
            } elseif {$ename == "geometric_curve_set"} {
              set e3s [[[$e2 Attributes] Item [expr 2]] Value]
              foreach e3 $e3s {
                set ename1 [$e3 Type]
                switch $ename1 {
                  line -
                  polyline {x3dSuppGeomLine $e3 $tsize $ename1}
                  circle -
                  ellipse {x3dSuppGeomCircle $e3 $tsize $ename1}
                  cartesian_point {x3dSuppGeomPoint $e3 $tsize}
                  trimmed_curve {lappend trimmedCurves $e3}
                  composite_curve {::tcom::foreach ccs [[[$e3 Attributes] Item [expr 2]] Value] {lappend trimmedCurves [[[$ccs Attributes] Item [expr 3]] Value]}}
                  default {
                    set msg "Supplemental geometry for '$ename1' in 'geometric_curve_set' is not supported."
                    errorMsg " $msg"
                    if {[lsearch $x3dMsg $msg] == -1} {lappend x3dMsg $msg}
                  }
                }
              }
            }

# process trimmed curves collected from above
            foreach tc $trimmedCurves {

# trimming with values OK (do not delete the meaningless 'catch')
              set trimVal(1) [[[$tc Attributes] Item [expr 3]] Value]
              set trimVal(2) [[[$tc Attributes] Item [expr 4]] Value]
              catch {set tmp "[$trimVal(1) Type][$trimVal(2) Type]"}

              foreach idx [list 1 2] {
                if {[llength $trimVal($idx)] == 2} {
                  if {[string is double [lindex $trimVal($idx) 0]]} {set trimVal($idx) [lindex $trimVal($idx) 0]}
                  if {[string is double [lindex $trimVal($idx) 1]]} {set trimVal($idx) [lindex $trimVal($idx) 1]}
                }
                if {[string first "handle" $trimVal($idx)] == -1} {
                  if {[expr {abs($trimVal($idx))}] > 1000.} {
                    set nval [trimNum [expr {10.*$trimVal($idx)/abs($trimVal($idx))}]]
                    errorMsg "Trim value [trimNum $trimVal($idx)] for a 'trimmed_curve' is very large, using $nval instead."
                    set trimVal($idx) $nval
                  }
                }
              }

# line, polyline, circle, ellipse trimmed curves
              set e3 [[[$tc Attributes] Item [expr 2]] Value]
              set ename2 [$e3 Type]
              switch $ename2 {
                line -
                polyline {x3dSuppGeomLine $e3 $tsize $ename2}
                circle -
                ellipse {x3dSuppGeomCircle $e3 $tsize $ename2}
                default {
                  set msg "Supplemental geometry for '[$e3 Type]' in 'trimmed_curve' is not supported."
                  errorMsg " $msg"
                  if {[lsearch $x3dMsg $msg] == -1} {lappend x3dMsg $msg}
                }
              }
            }
          }

          shell_based_surface_model {
            set cylIDs {}
            set e3 [lindex [[[$e2 Attributes] Item [expr 2]] Value] 0]
            set e4s [[[$e3 Attributes] Item [expr 2]] Value]
            ::tcom::foreach e4 $e4s {
              set e5 [lindex [[[$e4 Attributes] Item [expr 3]] Value] 0]
              set ename5 [$e5 Type]
              switch $ename5 {
                plane {x3dSuppGeomPlane $e5 $size}
                cylindrical_surface {
                  if {[lsearch $cylIDs [$e5 P21ID]] == -1} {
                    lappend cylIDs [$e5 P21ID]
                    x3dSuppGeomCylinder $e5 $tsize
                  }
                }
                default {
                  set msg "Supplemental geometry for '[$e5 Type]' in 'shell_based_surface_model' is not supported."
                  errorMsg " $msg"
                  if {[lsearch $x3dMsg $msg] == -1} {lappend x3dMsg $msg}
                }
              }
            }
          }

          default {
            if {$ename != "tessellated_shell" && $ename != "tessellated_wire"} {
              if {$ename == "direction"} {
                set msg "Supplemental geometry for '$ename' is not valid."
                if {[lsearch $x3dMsg $msg] == -1} {lappend x3dMsg $msg}
                set msg "Syntax Error: Supplemental geometry for '$ename' is not valid.  ($recPracNames(suppgeom), Sec. 4.2)"
                errorMsg $msg
                lappend syntaxErr(constructive_geometry_representation) [list [$e0 P21ID] "items" $msg]
              } else {
                set msg "Supplemental geometry for '$ename' is not supported."
                errorMsg " $msg"
                if {[lsearch $x3dMsg $msg] == -1} {lappend x3dMsg $msg}
              }
            }
          }
        }

# error
      } emsg]} {
        errorMsg " ERROR adding '$ename' Supplemental Geometry: $emsg"
      }
    }
  }

# check for tessellated edges that are supplemental geometry
  if {[info exists tessSuppGeomFile]} {
    close $tessSuppGeomFile
    if {[file size $tessSuppGeomFileName] > 0} {
      set f [open $tessSuppGeomFileName r]
      puts $x3dFile "<!-- TESSELLATED GEOMETRY that is SUPPLEMENTAL GEOMETRY -->"
      while {[gets $f line] >= 0} {puts $x3dFile $line}
      close $f
    }
    catch {file delete -force -- $tessSuppGeomFileName}
    unset tessSuppGeomFile
    unset tessSuppGeomFileName
  }
  puts $x3dFile "</Group></Switch>"
}

# -------------------------------------------------------------------------------
# supplemental geometry for axis
proc x3dSuppGeomAxis {e2 size tsize} {
  global axesDef viz x3dFile

  set e3 $e2
  set a2p3d [x3dGetA2P3D $e3]
  set origin [lindex $a2p3d 0]
  set axis   [lindex $a2p3d 1]
  set refdir [lindex $a2p3d 2]
  set transform [x3dTransform $origin $axis $refdir "supplemental geometry axes"]

# check for axis color
  set axisColor ""
  if {[catch {
    set e4s [$e3 GetUsedIn [string trim styled_item] [string trim item]]
    ::tcom::foreach e4 $e4s {
      set e5s [[[$e4 Attributes] Item [expr 2]] Value]
      ::tcom::foreach e5 $e5s {
        set e6 [[[$e5 Attributes] Item [expr 1]] Value]
        if {[$e6 Type] == "curve_style"} {
          set e7 [[[$e6 Attributes] Item [expr 4]] Value]
          if {$e7 != ""} {
            if {[$e7 Type] == "colour_rgb"} {
              set j 0
              ::tcom::foreach a7 [$e7 Attributes] {
                if {$j > 0} {append axisColor "[trimNum [$a7 Value] 3] "}
                incr j
              }
              set axisColor [string trim $axisColor]
            } elseif {[$e7 Type] == "draughting_pre_defined_colour"} {
              set axisColor [x3dPreDefinedColor [[[$e7 Attributes] Item [expr 1]] Value]]
            } else {
              errorMsg " Color '[$e7 Type]' for 'axis2_placement_3d' supplemental geometry is not supported."
            }
          }
        } else {
          errorMsg " Color defined with '[$e6 Type]' for 'axis2_placement_3d' supplemental geometry is not supported."
        }
      }
    }
  } emsg]} {
    errorMsg " ERROR getting color for 'axis2_placement_3d' supplemental geometry: $emsg"
  }

  if {$axisColor == ""} {
    set id [lsearch $axesDef $size]
    if {$id != -1} {
      puts $x3dFile "$transform<Group USE='axes$id'></Group>"
    } else {
      lappend axesDef $size
      puts $x3dFile $transform
      puts $x3dFile " <Group DEF='axes[expr {[llength $axesDef]-1}]'><Shape><Appearance><Material emissiveColor='1 0 0'></Material></Appearance><IndexedLineSet coordIndex='0 1 -1'><Coordinate point='0. 0. 0. $size 0. 0.'></Coordinate></IndexedLineSet></Shape>"
      puts $x3dFile " <Shape><Appearance><Material emissiveColor='0 .5 0'></Material></Appearance><IndexedLineSet coordIndex='0 1 -1'><Coordinate point='0. 0. 0. 0. $size 0.'></Coordinate></IndexedLineSet></Shape>"
      puts $x3dFile " <Shape><Appearance><Material emissiveColor='0 0 1'></Material></Appearance><IndexedLineSet coordIndex='0 1 -1'><Coordinate point='0. 0. 0. 0. 0. $size'></Coordinate></IndexedLineSet></Shape></Group>"
    }
  } else {
    set id [lsearch $axesDef "$size $axisColor"]
    if {$id != -1} {
      puts $x3dFile "$transform<Group USE='axes$id'></Group>"
    } else {
      lappend axesDef "$size $axisColor"
      set sz [trimNum [expr {$size*1.5}]]
      set tsize [trimNum [expr {$sz*0.33}]]
      puts $x3dFile $transform
      puts $x3dFile " <Group DEF='axes[expr {[llength $axesDef]-1}]'><Shape><IndexedLineSet coordIndex='0 1 -1'><Coordinate point='0. 0. 0. $sz 0. 0.'></Coordinate></IndexedLineSet><Appearance><Material emissiveColor='$axisColor'></Material></Appearance></Shape>"
      puts $x3dFile " <Shape><IndexedLineSet coordIndex='0 1 -1'><Coordinate point='0. 0. 0. 0. $sz 0.'></Coordinate></IndexedLineSet><Appearance><Material emissiveColor='$axisColor'></Material></Appearance></Shape>"
      puts $x3dFile " <Shape><IndexedLineSet coordIndex='0 1 -1'><Coordinate point='0. 0. 0. 0. 0. $sz'></Coordinate></IndexedLineSet><Appearance><Material emissiveColor='$axisColor'></Material></Appearance></Shape>"
      puts $x3dFile " <Transform translation='$sz 0 0' scale='$tsize $tsize $tsize'><Billboard axisOfRotation='0 0 0'><Shape><Text string='\"X\"'><FontStyle family='\"SANS\"'></FontStyle></Text><Appearance><Material diffuseColor='$axisColor'></Material></Appearance></Shape></Billboard></Transform>"
      puts $x3dFile " <Transform translation='0 $sz 0' scale='$tsize $tsize $tsize'><Billboard axisOfRotation='0 0 0'><Shape><Text string='\"Y\"'><FontStyle family='\"SANS\"'></FontStyle></Text><Appearance><Material diffuseColor='$axisColor'></Material></Appearance></Shape></Billboard></Transform>"
      puts $x3dFile " <Transform translation='0 0 $sz' scale='$tsize $tsize $tsize'><Billboard axisOfRotation='0 0 0'><Shape><Text string='\"Z\"'><FontStyle family='\"SANS\"'></FontStyle></Text><Appearance><Material diffuseColor='$axisColor'></Material></Appearance></Shape></Billboard></Transform></Group>"
    }
  }

  set nsize [trimNum [expr {$tsize*0.5}]]
  set tcolor "1 0 0"
  set name [[[$e2 Attributes] Item [expr 1]] Value]
  if {$axisColor != ""} {set tcolor $axisColor}
  if {$name != ""} {
    regsub -all "'" $name "" name
    puts $x3dFile " <Transform scale='$nsize $nsize $nsize'><Billboard axisOfRotation='0 0 0'><Shape><Text string='\"$name\"'><FontStyle family='\"SANS\"' justify='\"BEGIN\"'></FontStyle></Text><Appearance><Material diffuseColor='$tcolor'></Material></Appearance></Shape></Billboard></Transform>"
  }
  puts $x3dFile "</Transform>"
  set viz(SMG) 1
}

# -------------------------------------------------------------------------------
# supplemental geometry for point and the origin of a hole
proc x3dSuppGeomPoint {e2 tsize {thruHole ""} {holeName ""}} {
  global sphereDef viz x3dFile

  if {[catch {

# get cartesian_point name attribute or use hole name
    set name [[[$e2 Attributes] Item [expr 1]] Value]
    if {$holeName != ""} {set name $holeName}
    set name [string trim $name]

# append THRU for thru holes
    if {$thruHole == 1} {
      if {[string length $name] > 0} {
        append name " (THRU)"
      } else {
        append name "THRU"
      }
    }
    set coord1 [[[$e2 Attributes] Item [expr 2]] Value]

# point is a black emissive sphere
    set id [lsearch $sphereDef $tsize]
    if {$id != -1} {
      puts $x3dFile "<Transform translation='[vectrim $coord1]'><Shape USE='point$id'></Shape></Transform>"
    } else {
      lappend sphereDef $tsize
      puts $x3dFile "<Transform translation='[vectrim $coord1]'><Shape DEF='point[expr {[llength $sphereDef]-1}]'><Sphere radius='[trimNum [expr {$tsize*0.05}]]'></Sphere><Appearance><Material diffuseColor='0 0 0' emissiveColor='0 0 0'></Material></Appearance></Shape></Transform>"
    }

# point name
    if {$name != ""} {
      set nsize [trimNum [expr {$tsize*0.5}]]
      puts $x3dFile " <Transform translation='[vectrim $coord1]' scale='$nsize $nsize $nsize'><Billboard axisOfRotation='0 0 0'><Shape><Text string='\"$name\"'><FontStyle family='\"SANS\"' justify='\"BEGIN\"'></FontStyle></Text><Appearance><Material diffuseColor='0 0 0'></Material></Appearance></Shape></Billboard></Transform>"
    }
    set viz(SMG) 1
  } emsg]} {
    errorMsg "ERROR adding 'point' supplemental geometry: $emsg"
  }
}

# -------------------------------------------------------------------------------
# supplemental geometry for line, polyline
proc x3dSuppGeomLine {e3 tsize {type "line"}} {
  global trimVal viz x3dFile

  if {[catch {
    if {$type == "line"} {
      set e4 [[[$e3 Attributes] Item [expr 2]] Value]
      set coord1 [vectrim [[[$e4 Attributes] Item [expr 2]] Value]]
      set e5 [[[$e3 Attributes] Item [expr 3]] Value]
      set mag [[[$e5 Attributes] Item [expr 3]] Value]
      set e6 [[[$e5 Attributes] Item [expr 2]] Value]
      set dir [[[$e6 Attributes] Item [expr 2]] Value]
      set coord2 [vectrim [vecmult $dir $mag]]

# trim line
      if {[info exists trimVal(2)]} {

# trim with real number
        if {[string first "handle" $trimVal(2)] == -1} {
          if {$trimVal(1) != 0.} {set origin [vectrim [vecmult $dir [expr {$trimVal(1)*$mag}]]]}
          set coord2 [vectrim [vecmult $dir [expr {$trimVal(2)*$mag}]]]

# trim with cartesian points
        } else {
          foreach idx [list 1 2] {set trim($idx) [[[$trimVal($idx) Attributes] Item [expr 2]] Value]}
          set coord1 [vectrim $trim(1)]
          set coord2 [vectrim [vecsub $trim(2) $trim(1)]]
        }
      }

      set origin $coord1
      set coord2 [vectrim [vecadd $coord1 $coord2]]
      set points "$coord1 $coord2"
      set npoints 2

# polyline
    } else {
      set e4s [[[$e3 Attributes] Item [expr 2]] Value]
      set points ""
      set npoints 0
      ::tcom::foreach e4 $e4s {
        append points "[vectrim [[[$e4 Attributes] Item [expr 2]] Value]] "
        incr npoints
        if {$npoints == 1} {set origin $points}
      }
    }

# index
    set index ""
    for {set i 0} {$i < $npoints} {incr i} {append index "$i "}
    append index "-1"

# line geometry
    puts $x3dFile "<Shape><IndexedLineSet coordIndex='$index'><Coordinate point='$points'></Coordinate></IndexedLineSet><Appearance><Material emissiveColor='1 0 1'></Material></Appearance></Shape>"

# line name at beginning
    set name [[[$e3 Attributes] Item [expr 1]] Value]
    if {$name != ""} {
      set nsize [trimNum [expr {$tsize*0.5}]]
      puts $x3dFile " <Transform translation='$origin' scale='$nsize $nsize $nsize'><Billboard axisOfRotation='0 0 0'><Shape><Text string='\"$name\"'><FontStyle family='\"SANS\"' justify='\"BEGIN\"'></FontStyle></Text><Appearance><Material diffuseColor='1 0 1'></Material></Appearance></Shape></Billboard></Transform>"
    }
    set viz(SMG) 1

  } emsg]} {
    errorMsg "ERROR adding '$type' supplemental geometry: $emsg"
  }
}

# -------------------------------------------------------------------------------
# supplemental geometry for circle, ellipse
proc x3dSuppGeomCircle {e3 tsize {type "circle"}} {
  global DTR trimVal viz x3dFile x3dMsg

  if {[catch {
    set e4 [[[$e3 Attributes] Item [expr 2]] Value]
    set rad [[[$e3 Attributes] Item [expr 3]] Value]

    set scale ""
    if {$type == "ellipse"} {
      set rad1 [[[$e3 Attributes] Item [expr 4]] Value]
      set sy [expr {$rad1/$rad}]
      set scale "1 $sy 1"
      set dsy [trimNum [expr {abs($sy-1.)}]]
      if {$dsy <= 0.05} {errorMsg " Supplemental geometry $type axes ($rad,$rad1) are almost identical."}
    }

# circle position and orientation
    set a2p3d [x3dGetA2P3D $e4]
    set origin [lindex $a2p3d 0]
    set axis   [lindex $a2p3d 1]
    set refdir [lindex $a2p3d 2]
    set transform [x3dTransform $origin $axis $refdir "supplemental geometry $type" $scale]
    puts $x3dFile $transform

# generate circle, account for trimming
# lim is the limit on an angle before deciding it is in degrees to convert to radians
    set ns 48
    set angle 0.
    set dlt [expr {6.28319/$ns}]
    set trimmed 0
    set lim 6.28319

# trim with angles
    if {[info exists trimVal(1)]} {
      if {[string first "handle" $trimVal(1)] == -1} {
        set angle $trimVal(1)
        set conv 1.
        if {$trimVal(1) > $lim && $trimVal(2) > $lim} {
          set conv $DTR
          set angle [expr {$angle*$conv}]
        }
        set dlt [expr {$conv*($trimVal(2)-$trimVal(1))/$ns}]
        incr ns
        set trimmed 1

# trim with cartesian points
      } else {

# compute angles from cartesian points (doesn't work yet)
        #foreach idx [list 1 2] {
        #  set trim($idx) [[[$trimVal($idx) Attributes] Item [expr 2]] Value]
        #  set vec($idx) [vecnorm [vecsub $trim($idx) $origin]]
        #  outputMsg "$idx / trim point [vectrim $trim($idx)] / origin [vectrim $origin] / vector [vectrim $vec($idx)] / axis [vectrim $axis] / refdir [vectrim $refdir]" red
        #  outputMsg "angle [vecangle $vec($idx) $axis]"
        #}
        set msg "Supplemental geometry '$type' trimmed by 'cartesian_point' are not trimmed."
        errorMsg " $msg"
        if {[lsearch $x3dMsg $msg] == -1} {lappend x3dMsg $msg}
      }
    }
    set index ""
    for {set i 0} {$i < $ns} {incr i} {append index "$i "}
    if {!$trimmed} {append index "0 "}
    append index "-1"

    set coord ""
    for {set i 0} {$i < $ns} {incr i} {
      append coord "[trimNum [expr {$rad*cos($angle)}]] "
      append coord "[trimNum [expr {$rad*sin($angle)}]] "
      append coord "0 "
      set angle [expr {$angle+$dlt}]
      if {$i == 0} {set origin $coord}
    }

# circle geometry and possible name
    puts $x3dFile " <Shape><IndexedLineSet coordIndex='$index'><Coordinate point='$coord'></Coordinate></IndexedLineSet><Appearance><Material emissiveColor='1 0 1'></Material></Appearance></Shape>"
    set name [[[$e3 Attributes] Item [expr 1]] Value]
    if {$name != ""} {
      set nsize [trimNum [expr {$tsize*0.5}]]
      puts $x3dFile " <Transform translation='$origin' scale='$nsize $nsize $nsize'><Billboard axisOfRotation='0 0 0'><Shape><Text string='\"$name\"'><FontStyle family='\"SANS\"' justify='\"BEGIN\"'></FontStyle></Text><Appearance><Material diffuseColor='1 0 1'></Material></Appearance></Shape></Billboard></Transform>"
    }
    puts $x3dFile "</Transform>"
    set viz(SMG) 1

  } emsg]} {
    errorMsg "ERROR adding '$type' supplemental geometry: $emsg"
  }
}

# -------------------------------------------------------------------------------
# supplemental geometry for plane
proc x3dSuppGeomPlane {e2 size} {
  global planeDef viz x3dFile x3dMsg

  if {[catch {
    set e3 [[[$e2 Attributes] Item [expr 2]] Value]

# plane position and orientation
    set a2p3d [x3dGetA2P3D $e3]
    set origin [lindex $a2p3d 0]
    set axis   [lindex $a2p3d 1]
    set refdir [lindex $a2p3d 2]
    set transform [x3dTransform $origin $axis $refdir "supplemental geometry plane"]

# plane geometry
    set nsize [trimNum [expr {$size*2.}]]
    set id [lsearch $planeDef $nsize]
    if {$id != -1} {
      puts $x3dFile "$transform<Group USE='plane$id'></Group>"
    } else {
      lappend planeDef $nsize
      puts $x3dFile $transform
      puts $x3dFile " <Group DEF='plane[expr {[llength $planeDef]-1}]'><Shape><IndexedLineSet coordIndex='0 1 2 3 0 -1'><Coordinate point='-$nsize -$nsize 0. $nsize -$nsize 0. $nsize $nsize 0. -$nsize $nsize 0.'></Coordinate></IndexedLineSet><Appearance><Material emissiveColor='0 0 1'></Material></Appearance></Shape>"
      puts $x3dFile " <Shape><IndexedFaceSet solid='false' coordIndex='0 1 2 3 -1'><Coordinate point='-$nsize -$nsize 0. $nsize -$nsize 0. $nsize $nsize 0. -$nsize $nsize 0.'></Coordinate></IndexedFaceSet><Appearance><Material diffuseColor='0 0 1' transparency='0.8'></Material></Appearance></Shape></Group>"
    }

# plane name at one corner
    set name [[[$e2 Attributes] Item [expr 1]] Value]
    if {$name != ""} {
      set tsize [trimNum [expr {$size*0.33}]]
      puts $x3dFile " <Transform translation='-$nsize -$nsize 0.' scale='$tsize $tsize $tsize'><Billboard axisOfRotation='0 0 0'><Shape><Text string='\"$name\"'><FontStyle family='\"SANS\"' justify='\"BEGIN\"'></FontStyle></Text><Appearance><Material diffuseColor='0 0 1'></Material></Appearance></Shape></Billboard></Transform>"
    }
    puts $x3dFile "</Transform>"
    set viz(SMG) 1

# check if the plane is bounded
    set bnds [$e2 GetUsedIn [string trim advanced_face] [string trim faced_geometry]]
    set bound 0
    ::tcom::foreach bnd $bnds {set bound 1}
    if {$bound} {
      set msg "Bounding edges for supplemental geometry 'plane' are not supported."
      errorMsg " $msg"
      if {[lsearch $x3dMsg $msg] == -1} {lappend x3dMsg $msg}
    }

  } emsg]} {
    errorMsg "ERROR adding 'plane' supplemental geometry: $emsg"
  }
}

# -------------------------------------------------------------------------------
# supplemental geometry for cylinder
proc x3dSuppGeomCylinder {e2 size} {
  global viz x3dFile x3dMsg

  if {[catch {
    set e3 [[[$e2 Attributes] Item [expr 2]] Value]
    set rad [[[$e2 Attributes] Item [expr 3]] Value]

# cylinder position and orientation
    set a2p3d [x3dGetA2P3D $e3]
    set origin [lindex $a2p3d 0]
    set axis   [lindex $a2p3d 1]
    set refdir [lindex $a2p3d 2]
    set transform [x3dTransform $origin $axis $refdir "supplemental geometry cylinder"]
    puts $x3dFile "$transform<Transform rotation='1 0 0 1.5708'>"

# cylinder geometry
    puts $x3dFile "  <Shape><Cylinder radius='$rad' height='[trimNum [expr {$size*10.}]]' top='false' bottom='false' solid='false'></Cylinder><Appearance><Material diffuseColor='0 0 1' transparency='0.8'></Material></Appearance></Shape>"
    puts $x3dFile "</Transform></Transform>"

# cylinder name at origin
    set name [[[$e2 Attributes] Item [expr 1]] Value]
    if {$name != ""} {
      set tsize [trimNum [expr {$size*0.33}]]
      puts $x3dFile " <Transform translation='$origin' scale='$tsize $tsize $tsize'><Billboard axisOfRotation='0 0 0'><Shape><Text string='\"$name\"'><FontStyle family='\"SANS\"' justify='\"BEGIN\"'></FontStyle></Text><Appearance><Material diffuseColor='0 0 1'></Material></Appearance></Shape></Billboard></Transform>"
    }
    set viz(SMG) 1

# check if the cylinder is bounded
    set bnds [$e2 GetUsedIn [string trim advanced_face] [string trim face_geometry]]
    set bound 0
    ::tcom::foreach e0 $bnds {set bound 1}
    if {$bound} {
      set msg "Bounding edges for supplemental geometry 'cylindrical_surface' are not supported."
      errorMsg " $msg"
      if {[lsearch $x3dMsg $msg] == -1} {lappend x3dMsg $msg}
    }

  } emsg]} {
    errorMsg "ERROR adding 'cylinder' supplemental geometry: $emsg"
  }
}

# -------------------------------------------------------------------------------
# holes counter and spotface
proc x3dHoles {maxxyz} {
  global dim entCount holeDefinitions x3dFile viz syntaxErr DTR
  global objDesign

  set drillPoint [trimNum [expr {$maxxyz*0.02}]]
  set head 1
  set holeDEF {}

  set scale 1.
  if {$dim(unit) == "INCH"} {set scale 25.4}

  ::tcom::foreach e0 [$objDesign FindObjects [string trim item_identified_representation_usage]] {
    if {[catch {
      set e1 [[[$e0 Attributes] Item [expr 3]] Value]
      set e2 [[[$e0 Attributes] Item [expr 5]] Value]
      if {[string first "occurrence" [$e1 Type]] != -1 && [$e2 Type] == "mapped_item"} {
        set defID   [[[[$e1 Attributes] Item [expr 5]] Value] P21ID]
        set defType [[[[$e1 Attributes] Item [expr 5]] Value] Type]

        set holeName [split $defType "_"]
        foreach idx {0 1} {
          if {[string first "counter" [lindex $holeName $idx]] != -1 || [string first "spotface" [lindex $holeName $idx]] != -1} {set holeName [lindex $holeName $idx]}
        }

# check if there is an a2p3d associated with a hole occurrence
        set e3 [[[$e2 Attributes] Item [expr 3]] Value]
        if {[$e3 Type] == "axis2_placement_3d"} {
          if {$head} {
            outputMsg " Processing hole geometry" green
            puts $x3dFile "\n<!-- HOLES -->\n<Switch whichChoice='0' id='swHole'><Group>"
            set head 0
            set viz(HOL) 1
          }
          if {[lsearch $holeDEF $defID] == -1} {puts $x3dFile "<!-- $defType $defID -->"}

# hole geometry
          if {[info exists holeDefinitions($defID)]} {

# hole origin and axis transform
            set a2p3d [x3dGetA2P3D $e3]
            set origin [lindex $a2p3d 0]
            set axis   [lindex $a2p3d 1]
            set refdir [lindex $a2p3d 2]
            set transform [x3dTransform $origin $axis $refdir $holeName]

# drilled hole dimensions
            set drill [lindex $holeDefinitions($defID) 0]
            set drillRad [trimNum [expr {[lindex $drill 1]*0.5*$scale}] 5]
            set drillPoint $drillRad
            catch {unset drillDep}
            if {[llength $drill] > 2} {set drillDep [expr {[lindex $drill 2]*$scale}]}

# through hole
            set holeTop "true"
            set thruHole [lindex $holeDefinitions($defID) end-1]
            if {$thruHole == 1} {set holeTop "false"}

# hole name
            set holeName [lindex $holeDefinitions($defID) end]

            catch {unset sink}
            catch {unset bore}

            if {[llength $holeDefinitions($defID)] > 1} {
              set holeType [lindex [lindex $holeDefinitions($defID) 1] 0]

# countersink hole (cylinder, cone)
              if {$holeType == "countersink"} {
                set sink [lindex $holeDefinitions($defID) 1]

# compute length of countersink from angle and radius
                set sinkRad [trimNum [expr {[lindex $sink 1]*0.5*$scale}] 5]
                set sinkAng [expr {[lindex $sink 2]*0.5}]
                set sinkDep [expr {($sinkRad-$drillRad)/tan($sinkAng*$DTR)}]

# check for bad radius and depth
                if {$sinkRad <= $drillRad} {
                  set msg "Syntax Error: $holeType diameter <= drill diameter"
                  errorMsg $msg
                  foreach ent [list $holeType\_hole_definition simplified_$holeType\_hole_definition] {
                    if {[info exists entCount($ent)]} {
                      lappend syntaxErr($ent) [list $defID "countersink_diameter" $msg]
                      lappend syntaxErr($ent) [list $defID "drilled_hole_diameter" $msg]
                    }
                  }
                }
                if {[info exist drillDep]} {
                  if {$sinkDep >= $drillDep} {
                    set msg "Syntax Error: $holeType computed 'depth' >= drill depth"
                    errorMsg $msg
                    foreach ent [list $holeType\_hole_definition simplified_$holeType\_hole_definition] {
                      if {[info exists entCount($ent)]} {lappend syntaxErr($ent) [list $defID "drilled_hole_depth" $msg]}
                    }
                  }
                }

                if {[lsearch $holeDEF $defID] == -1} {
                  puts $x3dFile "$transform<Group DEF='$holeName$defID'>"
                  if {[info exists drillDep]} {
                    puts $x3dFile " <Transform rotation='1 0 0 1.5708' translation='0 0 [trimNum [expr {($drillDep+$sinkDep)*0.5}] 5]'>"
                    puts $x3dFile "  <Shape><Cylinder radius='$drillRad' height='[trimNum [expr {$drillDep-$sinkDep}] 5]' top='$holeTop' bottom='false' solid='false'></Cylinder><Appearance><Material diffuseColor='0 1 1'></Material></Appearance></Shape></Transform>"
                  }
                  puts $x3dFile " <Transform rotation='1 0 0 1.5708' translation='0 0 [trimNum [expr {$sinkDep*0.5}] 5]'>"
                  puts $x3dFile "  <Shape><Cone bottomRadius='$sinkRad' topRadius='$drillRad' height='[trimNum $sinkDep 5]' top='false' bottom='false' solid='false'></Cone><Appearance><Material diffuseColor='0 1 1'></Material></Appearance></Shape></Transform>"
                  puts $x3dFile "</Group></Transform>"
                  lappend holeDEF $defID
                } else {
                  puts $x3dFile "$transform<Group USE='$holeName$defID'></Group></Transform>"
                }

# counterbore or spotface hole (2 cylinders, flat cone)
              } elseif {$holeType == "counterbore" || $holeType == "spotface"} {
                set bore [lindex $holeDefinitions($defID) 1]
                set boreRad [expr {[lindex $bore 1]*0.5*$scale}]
                set boreDep [expr {[lindex $bore 2]*$scale}]

# check for bad radius and depth
                if {$boreRad <= $drillRad} {
                  set msg "Syntax Error: $holeType diameter <= drill diameter"
                  errorMsg $msg
                  foreach ent [list $holeType\_hole_definition simplified_$holeType\_hole_definition] {
                    if {[info exists entCount($ent)]} {
                      lappend syntaxErr($ent) [list $defID "counterbore" $msg]
                      lappend syntaxErr($ent) [list $defID "drilled_hole_diameter" $msg]
                    }
                  }
                }
                if {[info exist drillDep]} {
                  if {$boreDep >= $drillDep} {
                    set msg "Syntax Error: $holeType depth >= drill depth"
                    errorMsg $msg
                    foreach ent [list $holeType\_hole_definition simplified_$holeType\_hole_definition] {
                      if {[info exists entCount($ent)]} {
                        lappend syntaxErr($ent) [list $defID "counterbore" $msg]
                        lappend syntaxErr($ent) [list $defID "drilled_hole_depth" $msg]
                      }
                    }
                  }
                }

                if {[lsearch $holeDEF $defID] == -1} {
                  puts $x3dFile "$transform<Group DEF='$holeName$defID'>"
                  if {[info exists drillDep]} {
                    puts $x3dFile " <Transform rotation='1 0 0 1.5708' translation='0 0 [trimNum [expr {($drillDep+$boreDep)*0.5}] 5]'>"
                    puts $x3dFile "  <Shape><Cylinder radius='$drillRad' height='[trimNum [expr {$drillDep-$boreDep}] 5]' top='$holeTop' bottom='false' solid='false'></Cylinder><Appearance><Material diffuseColor='0 1 0'></Material></Appearance></Shape></Transform>"
                  }
                  puts $x3dFile " <Transform rotation='1 0 0 1.5708' translation='0 0 [trimNum $boreDep 5]'>"
                  puts $x3dFile "  <Shape><Cone bottomRadius='$boreRad' topRadius='$drillRad' height='0.001' top='false' bottom='false' solid='false'></Cone><Appearance><Material diffuseColor='0 1 0'></Material></Appearance></Shape></Transform>"
                  puts $x3dFile " <Transform rotation='1 0 0 1.5708' translation='0 0 [trimNum [expr {$boreDep*0.5}] 5]'>"
                  puts $x3dFile "  <Shape><Cylinder radius='$boreRad' height='[trimNum $boreDep 5]' top='false' bottom='false' solid='false'></Cylinder><Appearance><Material diffuseColor='0 1 0'></Material></Appearance></Shape></Transform>"
                  puts $x3dFile "</Group></Transform>"
                  lappend holeDEF $defID
                } else {
                  puts $x3dFile "$transform<Group USE='$holeName$defID'></Group></Transform>"
                }
              }
            }
          } else {
            errorMsg "Only drill entry points for holes are shown when no spreadsheet\n is generated with the report for Semantic PMI (See Options tab)."
            if {[lsearch $holeDEF $defID] == -1} {lappend holeDEF $defID}
          }

# point at origin of hole
          set e4 [[[$e3 Attributes] Item [expr 2]] Value]
          if {![info exists thruHole]} {set thruHole 0}
          x3dSuppGeomPoint $e4 $drillPoint $thruHole $holeName
        }
      }
    } emsg]} {
      errorMsg "ERROR adding 'hole' geometry: $emsg"
    }
  }
  if {$viz(HOL)} {puts $x3dFile "</Group></Switch>\n"}
  catch {unset holeDefinitions}
}

# -------------------------------------------------------------------------------
# set predefined color
proc x3dPreDefinedColor {name} {
  global defaultColor recPracNames spaces

  switch -- $name {
    black   {set color "0 0 0"}
    white   {set color "1 1 1"}
    red     {set color "1 0 0"}
    yellow  {set color "1 1 0"}
    green   {set color "0 1 0"}
    cyan    {set color "0 1 1"}
    blue    {set color "0 0 1"}
    magenta {set color "1 0 1"}
    default {
      set color [lindex $defaultColor 0]
      errorMsg "Syntax Error: draughting_pre_defined_colour name '$name' is not supported (using [lindex $defaultColor 1])$spaces\($recPracNames(model), Sec. 4.2.3, Table 2)"
    }
  }
  return $color
}

# -------------------------------------------------------------------------------
# write geometry for polyline annotations
proc x3dPolylinePMI {} {
  global ao gpmiPlacement opt placeAnchor placeOrigin recPracNames savedViewFile savedViewName savedViewNames savedViewNone spaces
  global x3dColor x3dColorFile x3dCoord x3dFile x3dIndex x3dIndexType x3dShape

  if {[catch {
    if {[info exists x3dCoord] || $x3dShape} {

# multiple saved views, write to individual files, collected in x3dViewpoint below
      set nosv 1
      set flist $x3dFile
      if {[llength $savedViewName] > 0} {
        set flist {}
        foreach svn $savedViewName {
          set svn1 "View[lsearch $savedViewNames $svn]"
          if {[info exists savedViewFile($svn1)]} {lappend flist $savedViewFile($svn1)}
        }
        set nosv 0
      }

# PMI not in a saved view
      if {$nosv} {
        incr savedViewNone
        if {$savedViewNone == 1} {puts $x3dFile "\n<!-- PMI not in a saved view -->\n<Switch whichChoice='0' id='swPMI'><Group>"}
      }

# loop over list of files from above
      foreach f $flist {

# multiple saved view color
        if {$opt(gpmiColor) == 3 && [llength $savedViewNames] > 1} {
          if {![info exists x3dColorFile($f)]} {set x3dColorFile($f) [x3dSetPMIColor $opt(gpmiColor) 1]}
          set x3dColor $x3dColorFile($f)
        }

        if {[string length $x3dCoord] > 0} {

# placeholder transform
          if {[string first "placeholder" $ao] != -1} {
            set transform [x3dTransform $gpmiPlacement(origin) $gpmiPlacement(axis) $gpmiPlacement(refdir) "annotation placeholder"]
            puts $f $transform
          }

# start shape
          if {$x3dColor != ""} {
            puts $f "<Shape><Appearance><Material emissiveColor='$x3dColor'></Material></Appearance>"
          } else {
            puts $f "<Shape><Appearance><Material emissiveColor='0 0 0'></Material></Appearance>"
            errorMsg "Syntax Error: Missing PMI Presentation color for [formatComplexEnt $ao] (using black)$spaces\($recPracNames(pmi242), Sec. 8.5, Fig. 84)"
          }

# index and coordinates
          puts $f " <IndexedLineSet coordIndex='[string trim $x3dIndex]'>\n  <Coordinate point='[string trim $x3dCoord]'></Coordinate></IndexedLineSet></Shape>"

# end placeholder transform, add leader line
          if {[string first "placeholder" $ao] != -1} {
            puts $f "</Transform>"
            puts $f "<Shape><Appearance><Material emissiveColor='$x3dColor'></Material></Appearance>"
            puts $f " <IndexedLineSet coordIndex='0 1 -1'>\n  <Coordinate point='$placeOrigin $placeAnchor'></Coordinate></IndexedLineSet></Shape>"
          }

# end shape
        } elseif {$x3dShape} {
          puts $f "</Indexed$x3dIndexType\Set></Shape>"
        }
      }
      set x3dCoord ""
      set x3dIndex ""
      set x3dColor ""
      set x3dShape 0
    }
  } emsg3]} {
    errorMsg "ERROR writing polyline annotation graphics: $emsg3"
  }
  update idletasks
}

# -------------------------------------------------------------------------------
# write coordinate axes
proc x3dCoordAxes {size} {
  global x3dAxes x3dFile

# axes
  if {$x3dAxes} {
    puts $x3dFile "\n<!-- COORDINATE AXIS -->\n<Switch whichChoice='0' id='swAxes'><Group>"
    puts $x3dFile "<Shape><Appearance><Material emissiveColor='1 0 0'></Material></Appearance><IndexedLineSet coordIndex='0 1 -1'><Coordinate point='0 0 0 $size 0 0'></Coordinate></IndexedLineSet></Shape>"
    puts $x3dFile "<Shape><Appearance><Material emissiveColor='0 .5 0'></Material></Appearance><IndexedLineSet coordIndex='0 1 -1'><Coordinate point='0 0 0 0 $size 0'></Coordinate></IndexedLineSet></Shape>"
    puts $x3dFile "<Shape><Appearance><Material emissiveColor='0 0 1'></Material></Appearance><IndexedLineSet coordIndex='0 1 -1'><Coordinate point='0 0 0 0 0 $size'></Coordinate></IndexedLineSet></Shape>"

# xyz labels
    set tsize [trimNum [expr {$size*0.33}]]
    puts $x3dFile "<Transform translation='$size 0 0' scale='$tsize $tsize $tsize'><Billboard axisOfRotation='0 0 0'><Shape><Appearance><Material diffuseColor='1 0 0'></Material></Appearance><Text string='\"X\"'><FontStyle family='\"SANS\"'></FontStyle></Text></Shape></Billboard></Transform>"
    puts $x3dFile "<Transform translation='0 $size 0' scale='$tsize $tsize $tsize'><Billboard axisOfRotation='0 0 0'><Shape><Appearance><Material diffuseColor='0 .5 0'></Material></Appearance><Text string='\"Y\"'><FontStyle family='\"SANS\"'></FontStyle></Text></Shape></Billboard></Transform>"
    puts $x3dFile "<Transform translation='0 0 $size' scale='$tsize $tsize $tsize'><Billboard axisOfRotation='0 0 0'><Shape><Appearance><Material diffuseColor='0 0 1'></Material></Appearance><Text string='\"Z\"'><FontStyle family='\"SANS\"'></FontStyle></Text></Shape></Billboard></Transform>"

# credits
    set tsize1 [trimNum [expr {$tsize*0.05}] 3]
    puts $x3dFile "<Transform scale='$tsize1 $tsize1 $tsize1'><Billboard axisOfRotation='0 0 0'><Shape><Text string='\"Generated by the\",\"NIST STEP File Analyzer and Viewer [getVersion]\"'><FontStyle family='\"SANS\"'></FontStyle></Text><Appearance><Material diffuseColor='0 0 0'></Material></Appearance></Shape></Billboard></Transform>"

# marker for selection point
    puts $x3dFile "\n<!-- SELECTION POINT -->"
    puts $x3dFile "<Transform id='marker'><Shape><PointSet><Coordinate point='0 0 0'></Coordinate></PointSet></Shape></Transform>"
    puts $x3dFile "</Group></Switch>"
    set x3dAxes 0
  }
}

# -------------------------------------------------------------------------------
# get A2P3D origin, axis, refdir
proc x3dGetA2P3D {e0} {

  set origin "0 0 0"
  set axis   "0 0 1"
  set refdir "1 0 0"
  set debug 0

# a2p3d origin
  set a2 [[$e0 Attributes] Item [expr 2]]
  set e2 [$a2 Value]
  if {$e2 != ""} {
    set origin [vectrim [[[$e2 Attributes] Item [expr 2]] Value]]
    if {$debug} {errorMsg "      [$e2 Type] [$e2 P21ID] ([$a2 Name]) $origin" red}
  }

# a2p3d axis
  set a3 [[$e0 Attributes] Item [expr 3]]
  set e3 [$a3 Value]
  if {$e3 != ""} {
    set axis [[[$e3 Attributes] Item [expr 2]] Value]
    if {$debug} {errorMsg "      [$e3 Type] [$e3 P21ID] ([$a3 Name]) $axis" red}
  }

# a2p3d reference direction
  set a4 [[$e0 Attributes] Item [expr 4]]
  set e4 [$a4 Value]
  if {$e4 != ""} {
    set refdir [[[$e4 Attributes] Item [expr 2]] Value]
    if {$debug} {errorMsg "      [$e4 Type] [$e4 P21ID] ([$a4 Name]) $refdir" red}
  }

  return [list $origin $axis $refdir]
}

# -------------------------------------------------------------------------------
# generate transform
proc x3dTransform {origin axis refdir {text ""} {scale ""}} {

  set transform "<Transform"
  if {$origin != "0. 0. 0."} {append transform " translation='$origin'"}
  set rot [x3dGetRotation $axis $refdir $text]
  if {[lindex $rot 3] != 0} {append transform " rotation='$rot'"}
  if {$scale != ""} {append transform " scale='$scale'"}
  append transform ">"
  return $transform
}

# -------------------------------------------------------------------------------
# set x3d color for PMI
proc x3dSetPMIColor {type {mode 0}} {
  global idxColor

# black
  if {$type == 1} {set color "0 0 0"}

# random
  if {$type == 2 || $type == 3} {
    incr idxColor($mode)
    switch -- $idxColor($mode) {
      1 {set color "1 0 0"}
      2 {set color "0 0 1"}
      3 {set color "0 .5 0"}
      4 {set color "1 0 1"}
      5 {set color "0 .5 .5"}
    }
    if {$idxColor($mode) == 5} {set idxColor($mode) 0}
  }
  return $color
}

# -------------------------------------------------------------------------------------------------
# open X3DOM file
proc openX3DOM {{fn ""} {numFile 0}} {
  global lastX3DOM multiFile opt scriptName x3dMsgColor x3dFileName viz

# f3 is for opening last x3dom file with function key F3
  set f3 1
  if {$fn == ""} {
    set f3 0
    set ok 0

# check that there is a file to view
    if {[info exists x3dFileName]} {if {[file exists $x3dFileName]} {set ok 1}}
    if {$ok} {
      set fn $x3dFileName

# no file, show message
    } elseif {$opt(viewPMI) || $opt(viewTessPart) || $opt(viewFEA) || $opt(viewPart)} {
      if {$opt(xlFormat) == "None"} {errorMsg "There is nothing in the STEP file to View based on the selections on the Options tab."}
      return
    }
  }

  if {[file exists $fn] != 1} {return}
  if {![info exists multiFile]} {set multiFile 0}

  set open 0
  if {![info exists viz(PRT)]} {set viz(PRT) 0}
  if {$f3} {
    set open 1
  } elseif {($viz(PMI) || $viz(TPG) || $viz(FEA) || $viz(PRT)) && $fn != "" && $multiFile == 0} {
    if {$opt(outputOpen)} {set open 1}
  }

# open file (.html) in web browser
  set lastX3DOM $fn
  if {$open} {
    if {![info exists x3dMsgColor]} {set x3dMsgColor blue}
    outputMsg "\nOpening View in the default Web Browser: [file tail $fn] ([expr {[file size $fn]/1024}] Kb)" $x3dMsgColor
    catch {.tnb select .tnb.status}
    if {[catch {
      exec {*}[auto_execok start] "" [file nativename $fn]
    } emsg]} {
      if {[string first "UNC" $emsg] != -1} {set emsg [fixErrorMsg $emsg]}
      if {$emsg != ""} {
        errorMsg "ERROR opening View file: $emsg\n Open [truncFileName [file nativename $fn]]\n in a web browser that supports x3dom https://www.x3dom.org"
      }
    }
    update idletasks
  } elseif {$numFile == 0 && [string first "STEP-File-Analyzer.exe" $scriptName] != -1} {
    outputMsg " Use F3 to open the View (see Options tab)" red
  }
}

# -------------------------------------------------------------------------------
# get saved view names
proc getSavedViewName {objEntity} {
  global draughtingModels draftModelCameraNames draftModelCameras savedsavedViewNames savedViewName

# saved view name already saved
  if {[info exists savedsavedViewNames([$objEntity P21ID])]} {return $savedsavedViewNames([$objEntity P21ID])}

  set savedViewName {}
  foreach dm $draughtingModels {
    set entDraughtingModels [$objEntity GetUsedIn [string trim $dm] [string trim items]]
    set entDraughtingCallouts [$objEntity GetUsedIn [string trim draughting_callout] [string trim contents]]
    ::tcom::foreach entDraughtingCallout $entDraughtingCallouts {
      set entDraughtingModels [$entDraughtingCallout GetUsedIn [string trim $dm] [string trim items]]
    }

    ::tcom::foreach entDraughtingModel $entDraughtingModels {
      if {[info exists draftModelCameras([$entDraughtingModel P21ID])]} {
        set dmcn $draftModelCameraNames([$entDraughtingModel P21ID])
        if {[lsearch $savedViewName $dmcn] == -1} {lappend savedViewName $dmcn}
      }
    }
  }

# save saved view name
  if {![info exists savedsavedViewNames([$objEntity P21ID])]} {set savedsavedViewNames([$objEntity P21ID]) $savedViewName}
  return $savedViewName
}

# -------------------------------------------------------------------------------
# script for switch node
proc x3dSwitchScript {name {name1 ""}} {
  global savedViewNames x3dFile

# not parts
  if {[string first "Part" $name] != 0} {

# adjust for saved views
    if {$name1 == ""} {set name1 $name}
    set viewName ""
    if {[string first "View" $name] == 0} {
      set viewName " [lindex $savedViewNames [string range $name end end]]"
      if {$name1 != ""} {set name1 "View[lsearch $savedViewNames $name1]"}
    }
    puts $x3dFile "\n<!-- $name$viewName switch -->\n<script>function tog$name\(choice)\{"
    puts $x3dFile " if (!document.getElementById('sw$name').checked) \{document.getElementById('sw$name1').setAttribute('whichChoice', -1);\} else \{document.getElementById('sw$name1').setAttribute('whichChoice', 0);\}"
    puts $x3dFile " document.getElementById('sw$name').checked = !document.getElementById('sw$name').checked;\n\}</script>"

# parts
  } else {
    set ids [string range $name 4 end]
    puts $x3dFile "\n<!-- $name switch -->\n<script>function togPart[lindex $ids 0]\(choice)\{"
    if {[llength $ids] == 1} {
      puts $x3dFile " if (!document.getElementById('sw$name').checked) \{document.getElementById('sw$name').setAttribute('whichChoice', -1);\} else \{document.getElementById('sw$name').setAttribute('whichChoice', 0);\}"
      puts $x3dFile " document.getElementById('sw$name').checked = !document.getElementById('sw$name').checked;\n\}</script>"
    } else {
      puts $x3dFile " if (!document.getElementById('swPart[lindex $ids 0]').checked) \{"
      foreach id $ids {puts $x3dFile "  document.getElementById('swPart$id').setAttribute('whichChoice', -1);"}
      puts $x3dFile " \} else \{"
      foreach id $ids {puts $x3dFile "  document.getElementById('swPart$id').setAttribute('whichChoice', 0);"}
      puts $x3dFile " \}"
      puts $x3dFile " document.getElementById('swPart[lindex $ids 0]').checked = !document.getElementById('swPart[lindex $ids 0]').checked;\n\}</script>"
    }
  }
}

# -------------------------------------------------------------------------------
# generate x3d rotation (axis angle format) from axis2_placement_3d
proc x3dGetRotation {axis refdir {type ""}} {
  global x3dMsg

# check if one of the vectors is zero length, i.e., '0 0 0'
  set msg ""
  if {[veclen $axis] == 0 || [veclen $refdir] == 0} {
    set msg "Syntax Error: The axis2_placement_3d axis or ref_direction vector is '0 0 0'"
    if {$type != ""} {append msg " for a $type"}
    append msg "."

# check if axis and refdir are congruent
  } elseif {[veclen [veccross $axis $refdir]] == 0} {
    set msg "Syntax Error: The axis2_placement_3d axis and ref_direction vectors '$refdir' are congruent"
    if {$type != ""} {append msg " for a $type"}
    append msg "."
  }

  if {$msg != ""} {
    errorMsg $msg
    set msg1 [string range $msg 14 end]
    if {[lsearch $x3dMsg $msg1] == -1 && ([string first "supplemental" $msg1] != -1 || [string first "datum target" $msg1] != -1)} {lappend x3dMsg $msg1}
  }

# construct rotation matrix u, must normalize to use with quaternion
  set u3 [vecnorm $axis]
  set u1 [vecnorm [vecsub $refdir [vecmult $u3 [vecdot $refdir $u3]]]]
  set u2 [vecnorm [veccross $u3 $u1]]

# extract quaternion
  if {[lindex $u1 0] >= 0.0} {
    set tmp [expr {[lindex $u2 1] + [lindex $u3 2]}]
    if {$tmp >=  0.0} {
      set q(0) [expr {[lindex $u1 0] + $tmp + 1.}]
      set q(1) [expr {[lindex $u3 1] - [lindex $u2 2]}]
      set q(2) [expr {[lindex $u1 2] - [lindex $u3 0]}]
      set q(3) [expr {[lindex $u2 0] - [lindex $u1 1]}]
    } else {
      set q(0) [expr {[lindex $u3 1] - [lindex $u2 2]}]
      set q(1) [expr {[lindex $u1 0] - $tmp + 1.}]
      set q(2) [expr {[lindex $u2 0] + [lindex $u1 1]}]
      set q(3) [expr {[lindex $u1 2] + [lindex $u3 0]}]
    }
  } else {
    set tmp [expr {[lindex $u2 1] - [lindex $u3 2]}]
    if {$tmp >= 0.0} {
      set q(0) [expr {[lindex $u1 2] - [lindex $u3 0]}]
      set q(1) [expr {[lindex $u2 0] + [lindex $u1 1]}]
      set q(2) [expr {1. - [lindex $u1 0] + $tmp}]
      set q(3) [expr {[lindex $u3 1] + [lindex $u2 2]}]
    } else {
      set q(0) [expr {[lindex $u2 0] - [lindex $u1 1]}]
      set q(1) [expr {[lindex $u1 2] + [lindex $u3 0]}]
      set q(2) [expr {[lindex $u3 1] + [lindex $u2 2]}]
      set q(3) [expr {1. - [lindex $u1 0] - $tmp}]
    }
  }

# normalize quaternion
  set lenq [expr {sqrt($q(0)*$q(0) + $q(1)*$q(1) + $q(2)*$q(2) + $q(3)*$q(3))}]
  if {$lenq != 0.} {
    foreach i {0 1 2 3} {set q($i) [expr {$q($i) / $lenq}]}
  } else {
    foreach i {0 1 2 3} {set q($i) 0.}
  }

# convert from quaterion to x3d rotation
  set rotation_changed {0 1 0 0}
  set angle [expr {acos($q(0))*2.0}]
  if {$angle != 0.} {
    set sina [expr {sin($angle*0.5)}]
    set axm 0.
    foreach i {0 1 2} {
      set i1 [expr {$i+1}]
      set ax [expr {-$q($i1) / $sina}]
      lset rotation_changed $i $ax
      set axa [expr {abs($ax)}]
      if {$axa > $axm} {set axm $axa}
    }
    if {$axm > 0. && $axm < 1.} {
      foreach i {0 1 2} {lset rotation_changed $i [expr {[lindex $rotation_changed $i]/$axm}]}
    }
    lset rotation_changed 3 $angle
    foreach i {0 1 2 3} {lset rotation_changed $i [trimNum [lindex $rotation_changed $i] 4]}
  }
  return $rotation_changed
}
